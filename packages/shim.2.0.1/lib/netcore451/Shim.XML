<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Shim</name>
    </assembly>
    <members>
        <member name="T:System.ResolveEventHandler">
            <summary>Represents a method that handles the <see cref="E:System.AppDomain.TypeResolve" />, <see cref="E:System.AppDomain.ResourceResolve" />, or <see cref="E:System.AppDomain.AssemblyResolve" /> event of an <see cref="T:System.AppDomain" />.</summary><returns>The assembly that resolves the type, assembly, or resource; or null if the assembly cannot be resolved.</returns><param name="sender">The source of the event. </param><param name="args">The event data. </param>
        </member>
        <member name="T:System.AppDomain">
            <summary>Represents an application domain, which is an isolated environment where applications execute. This class cannot be inherited.</summary>
        </member>
        <member name="E:System.AppDomain.AssemblyResolve">
            <summary>Occurs when the resolution of an assembly fails.</summary>
        </member>
        <member name="P:System.AppDomain.CurrentDomain">
            <summary>Gets the current application domain for the current <see cref="T:System.Threading.Thread" />.</summary><returns>The current application domain.</returns>
        </member>
        <member name="M:System.AppDomain.GetAssemblies">
            <summary>Gets the assemblies that have been loaded into the execution context of this application domain.</summary><returns>An array of assemblies in this application domain.</returns><exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain. </exception>
        </member>
        <member name="M:System.AppDomain.Load(System.String)">
            <summary>Loads an <see cref="T:System.Reflection.Assembly" /> given its display name.</summary><returns>The loaded assembly.</returns><param name="assemblyString">The display name of the assembly. See <see cref="P:System.Reflection.Assembly.FullName" />.</param><exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> is null</exception><exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyString" /> is not found. </exception><exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString" /> was compiled with a later version.</exception><exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain. </exception><exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences. </exception>
        </member>
        <member name="T:System.ApplicationException">
            <summary>Serves as the base class for application-defined exceptions.</summary>
        </member>
        <member name="M:System.ApplicationException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.ApplicationException" /> class.</summary>
        </member>
        <member name="M:System.ApplicationException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.ApplicationException" /> class with a specified error message.</summary><param name="message">A message that describes the error. </param>
        </member>
        <member name="T:System.Collections.Generic.EnumerableExtensions">
            <summary>
            Internal class providing <see cref="T:System.Collections.Generic.IEnumerable`1"/> support methods.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.TypeSafeCopyTo``1(System.Collections.Generic.IEnumerable{``0},System.Array,System.Int32)">
            <summary>
            Copy contents from type collection to array, provided the array is of same type as collection.
            </summary>
            <typeparam name="T">Type of the collection items.</typeparam>
            <param name="source">Collection subject to copying.</param>
            <param name="array">Array to which the collection should be copied, items must be of same type as collection items.</param>
            <param name="index">Start index in <paramref name="array"/>.</param>
        </member>
        <member name="T:System.Collections.Generic.ListExtensions">
            <summary>
            Shim complement for the <see cref="T:System.Collections.Generic.List`1"/> class. <see cref="T:System.Collections.Generic.List`1"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.AsReadOnly``1(System.Collections.Generic.List{``0})">
            <summary>Returns a read-only <see cref="T:System.Collections.Generic.IList`1" /> wrapper for the current collection.</summary><returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that acts as a read-only wrapper around the current <see cref="T:System.Collections.Generic.List`1" />.</returns>
            <param name="list">List to be returned as a read-only list.</param>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.ConvertAll``2(System.Collections.Generic.List{``0},System.Converter{``0,``1})">
            <summary>Converts the elements in the current <see cref="T:System.Collections.Generic.List`1" /> to another type, and returns a list containing the converted elements.</summary><returns>A <see cref="T:System.Collections.Generic.List`1" /> of the target type containing the converted elements from the current <see cref="T:System.Collections.Generic.List`1" />.</returns><param name="converter">A <see cref="T:System.Converter`2" /> delegate that converts each element from one type to another type.</param><typeparam name="TOutput">The type of the elements of the target array.</typeparam><exception cref="T:System.ArgumentNullException">
        <paramref name="converter" /> is null.</exception>
            <param name="list">List subject to conversion.</param>
        </member>
        <member name="T:System.ComponentModel.BrowsableAttribute">
            <summary>Specifies whether a property or event should be displayed in a Properties window.</summary>
        </member>
        <member name="M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.BrowsableAttribute" /> class.</summary><param name="browsable">true if a property or event can be modified at design time; otherwise, false. The default is true. </param>
        </member>
        <member name="T:System.ComponentModel.CategoryAttribute">
            <summary>Specifies the name of the category in which to group the property or event when displayed in a <see cref="T:System.Windows.Forms.PropertyGrid" /> control set to Categorized mode.</summary>
        </member>
        <member name="M:System.ComponentModel.CategoryAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CategoryAttribute" /> class using the specified category name.</summary><param name="category">The name of the category. </param>
        </member>
        <member name="T:System.ComponentModel.DescriptionAttribute">
            <summary>Specifies a description for a property or event.</summary>
        </member>
        <member name="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DescriptionAttribute" /> class with a description.</summary><param name="description">The description text. </param>
        </member>
        <member name="P:System.ComponentModel.DescriptionAttribute.Description">
            <summary>Gets the description stored in this attribute.</summary><returns>The description stored in this attribute.</returns>
        </member>
        <member name="T:System.ComponentModel.DisplayNameAttribute">
            <summary>Specifies the display name for a property, event, or public void method which takes no arguments. </summary>
        </member>
        <member name="M:System.ComponentModel.DisplayNameAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DisplayNameAttribute" /> class using the display name.</summary><param name="displayName">The display name.</param>
        </member>
        <member name="T:System.ComponentModel.ISynchronizeInvoke">
            <summary>Provides a way to synchronously or asynchronously execute a delegate.</summary>
        </member>
        <member name="T:System.Console">
            <summary>Represents the standard input, output, and error streams for console applications. This class cannot be inherited.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
        </member>
        <member name="P:System.Console.Error">
            <summary>Gets the standard error output stream.</summary><returns>A <see cref="T:System.IO.TextWriter" /> that represents the standard error output stream.</returns>
        </member>
        <member name="P:System.Console.Out">
            <summary>Gets the standard output stream.</summary><returns>A <see cref="T:System.IO.TextWriter" /> that represents the standard output stream.</returns>
        </member>
        <member name="M:System.Console.SetOut(System.IO.TextWriter)">
            <summary>Sets the <see cref="P:System.Console.Out" /> property to the specified <see cref="T:System.IO.TextWriter" /> object.</summary><param name="newOut">A stream that is the new standard output. </param><exception cref="T:System.ArgumentNullException">
        <paramref name="newOut" /> is null. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:System.Console.Write(System.Char)">
            <summary>Writes the specified Unicode character value to the standard output stream.</summary><param name="value">The value to write. </param><exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:System.Console.Write(System.String)">
            <summary>Writes the specified string value to the standard output stream.</summary><param name="value">The value to write. </param><exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:System.Console.Write(System.Int32)">
            <summary>Writes the text representation of the specified 32-bit signed integer value to the standard output stream.</summary><param name="value">The value to write. </param><exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:System.Console.WriteLine">
            <summary>Writes the current line terminator to the standard output stream.</summary><exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:System.Console.WriteLine(System.Char)">
            <summary>Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.</summary><param name="value">The value to write. </param><exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:System.Console.WriteLine(System.String,System.Object[])">
            <summary>Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.</summary><param name="format">A composite format string (see Remarks).</param><param name="arg">An array of objects to write using <paramref name="format" />. </param><exception cref="T:System.IO.IOException">An I/O error occurred. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="arg" /> is null. </exception><exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid. </exception>
        </member>
        <member name="T:System.Converter`2">
            <summary>Represents a method that converts an object from one type to another type.</summary><returns>The <paramref name="TOutput" /> that represents the converted <paramref name="TInput" />.</returns><param name="input">The object to convert.</param><typeparam name="TInput">The type of object that is to be converted.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam><typeparam name="TOutput">The type the input object is to be converted to.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
        </member>
        <member name="T:System.Data.Common.SchemaTableColumn">
            <summary>Describes the column metadata of the schema for a database table.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableColumn.ColumnName">
            <summary>Specifies the name of the column in the schema table.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableColumn.ColumnOrdinal">
            <summary>Specifies the ordinal of the column.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableColumn.ColumnSize">
            <summary>Specifies the size of the column.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableColumn.NumericPrecision">
            <summary>Specifies the precision of the column data, if the data is numeric.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableColumn.NumericScale">
            <summary>Specifies the scale of the column data, if the data is numeric.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableColumn.DataType">
            <summary>Specifies the type of data in the column.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableColumn.ProviderType">
            <summary>Specifies the provider-specific data type of the column.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableColumn.NonVersionedProviderType">
            <summary>Specifies the non-versioned provider-specific data type of the column.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableColumn.IsLong">
            <summary>Specifies whether this column contains long data.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableColumn.AllowDBNull">
            <summary>Specifies whether value DBNull is allowed.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableColumn.IsAliased">
            <summary>Specifies whether this column is aliased.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableColumn.IsExpression">
            <summary>Specifies whether this column is an expression.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableColumn.IsKey">
            <summary>Specifies whether this column is a key for the table. </summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableColumn.IsUnique">
            <summary>Specifies whether a unique constraint applies to this column.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableColumn.BaseSchemaName">
            <summary>Specifies the name of the schema in the schema table.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableColumn.BaseTableName">
            <summary>Specifies the name of the table in the schema table.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableColumn.BaseColumnName">
            <summary>Specifies the name of the column in the schema table.</summary>
        </member>
        <member name="T:System.Data.Common.SchemaTableOptionalColumn">
            <summary>Describes optional column metadata of the schema for a database table.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableOptionalColumn.ProviderSpecificDataType">
            <summary>Specifies the provider-specific data type of the column.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsAutoIncrement">
            <summary>Specifies whether the column values in the column are automatically incremented.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsHidden">
            <summary>Specifies whether this column is hidden.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsReadOnly">
            <summary>Specifies whether this column is read-only.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsRowVersion">
            <summary>Specifies whether this column contains row version information.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseServerName">
            <summary>The server name of the column.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseCatalogName">
            <summary>The name of the catalog associated with the results of the latest query.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableOptionalColumn.AutoIncrementSeed">
            <summary>Specifies the value at which the series for new identity columns is assigned.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableOptionalColumn.AutoIncrementStep">
            <summary>Specifies the increment between values in the identity column.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableOptionalColumn.DefaultValue">
            <summary>The default value for the column.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableOptionalColumn.Expression">
            <summary>The expression used to compute the column.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseTableNamespace">
            <summary>The namespace for the table that contains the column.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseColumnNamespace">
            <summary>The namespace of the column.</summary>
        </member>
        <member name="F:System.Data.Common.SchemaTableOptionalColumn.ColumnMapping">
            <summary>Specifies the mapping for the column.</summary>
        </member>
        <member name="T:System.Data.DataColumn">
            <summary>Represents the schema of a column in a <see cref="T:System.Data.DataTable" />.</summary>
        </member>
        <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type)">
            <summary>Initializes a new instance of the <see cref="T:System.Data.DataColumn" /> class using the specified column name and data type.</summary><param name="columnName">A string that represents the name of the column to be created. If set to null or an empty string (""), a default name will be specified when added to the columns collection. </param><param name="dataType">A supported <see cref="P:System.Data.DataColumn.DataType" />. </param><exception cref="T:System.ArgumentNullException">No <paramref name="dataType" /> was specified. </exception>
        </member>
        <member name="P:System.Data.DataColumn.Table">
            <summary>Gets the <see cref="T:System.Data.DataTable" /> to which the column belongs to.</summary><returns>The <see cref="T:System.Data.DataTable" /> that the <see cref="T:System.Data.DataColumn" /> belongs to.</returns>
        </member>
        <member name="P:System.Data.DataColumn.ReadOnly">
            <summary>Gets or sets a value that indicates whether the column allows for changes as soon as a row has been added to the table.</summary><returns>true if the column is read only; otherwise, false. The default is false.</returns><exception cref="T:System.ArgumentException">The property is set to false on a computed column. </exception>
        </member>
        <member name="P:System.Data.DataColumn.DataType">
            <summary>Gets or sets the type of data stored in the column.</summary><returns>A <see cref="T:System.Type" /> object that represents the column data type.</returns><exception cref="T:System.ArgumentException">The column already has data stored. </exception>
        </member>
        <member name="P:System.Data.DataColumn.MaxLength">
            <summary>Gets or sets the maximum length of a text column.</summary><returns>The maximum length of the column in characters. If the column has no maximum length, the value is –1 (default).</returns>
        </member>
        <member name="P:System.Data.DataColumn.ColumnName">
            <summary>Gets or sets the name of the column in the <see cref="T:System.Data.DataColumnCollection" />.</summary><returns>The name of the column.</returns><exception cref="T:System.ArgumentException">The property is set to null or an empty string and the column belongs to a collection. </exception><exception cref="T:System.Data.DuplicateNameException">A column with the same name already exists in the collection. The name comparison is not case sensitive. </exception>
        </member>
        <member name="P:System.Data.DataColumn.DefaultValue">
            <summary>Gets or sets the default value for the column when you are creating new rows.</summary><returns>A value appropriate to the column's <see cref="P:System.Data.DataColumn.DataType" />.</returns><exception cref="T:System.InvalidCastException">When you are adding a row, the default value is not an instance of the column's data type. </exception>
        </member>
        <member name="P:System.Data.DataColumn.Caption">
            <summary>Gets or sets the caption for the column.</summary><returns>The caption of the column. If not set, returns the <see cref="P:System.Data.DataColumn.ColumnName" /> value.</returns>
        </member>
        <member name="T:System.Data.DataColumnCollection">
            <summary>Represents a collection of <see cref="T:System.Data.DataColumn" /> objects for a <see cref="T:System.Data.DataTable" />.</summary>
        </member>
        <member name="M:System.Data.DataColumnCollection.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a collection of data columns.
            </summary>
            <param name="table">Table that is the owner of the collection of data columns.</param>
        </member>
        <member name="P:System.Data.DataColumnCollection.Item(System.String)">
            <summary>Gets the <see cref="T:System.Data.DataColumn" /> from the collection with the specified name.</summary><returns>The <see cref="T:System.Data.DataColumn" /> in the collection with the specified <see cref="P:System.Data.DataColumn.ColumnName" />; otherwise a null value if the <see cref="T:System.Data.DataColumn" /> does not exist.</returns><param name="name">The <see cref="P:System.Data.DataColumn.ColumnName" /> of the column to return. </param>
        </member>
        <member name="P:System.Data.DataColumnCollection.Item(System.Int32)">
            <summary>Gets the <see cref="T:System.Data.DataColumn" /> from the collection at the specified index.</summary><returns>The <see cref="T:System.Data.DataColumn" /> at the specified index.</returns><param name="index">The zero-based index of the column to return. </param><exception cref="T:System.IndexOutOfRangeException">The index value is greater than the number of items in the collection. </exception>
        </member>
        <member name="P:System.Data.DataColumnCollection.Count">
            <summary>Gets the total number of elements in a collection.</summary><returns>The total number of elements in a collection.</returns>
        </member>
        <member name="P:System.Data.DataColumnCollection.IsSynchronized">
            <summary>Gets a value that indicates whether the <see cref="T:System.Data.InternalDataCollectionBase" /> is synchonized.</summary><returns>true if the collection is synchronized; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:System.Data.DataColumnCollection.SyncRoot">
            <summary>Gets an object that can be used to synchronize the collection.</summary><returns>The <see cref="T:System.object" /> used to synchronize the collection.</returns>
        </member>
        <member name="M:System.Data.DataColumnCollection.Add(System.String,System.Type)">
            <summary>Creates and adds a <see cref="T:System.Data.DataColumn" /> object that has the specified name and type to the <see cref="T:System.Data.DataColumnCollection" />.</summary><returns>The newly created <see cref="T:System.Data.DataColumn" />.</returns><param name="columnName">The <see cref="P:System.Data.DataColumn.ColumnName" /> to use when you create the column. </param><param name="type">The <see cref="P:System.Data.DataColumn.DataType" /> of the new column. </param><exception cref="T:System.Data.DuplicateNameException">The collection already has a column with the specified name. (The comparison is not case-sensitive.) </exception><exception cref="T:System.Data.InvalidExpressionException">The expression is invalid. See the <see cref="P:System.Data.DataColumn.Expression" /> property for more information about how to create expressions. </exception>
        </member>
        <member name="M:System.Data.DataColumnCollection.Add(System.String)">
            <summary>Creates and adds a <see cref="T:System.Data.DataColumn" /> object that has the specified name to the <see cref="T:System.Data.DataColumnCollection" />.</summary><returns>The newly created <see cref="T:System.Data.DataColumn" />.</returns><param name="columnName">The name of the column. </param><exception cref="T:System.Data.DuplicateNameException">The collection already has a column with the specified name. (The comparison is not case-sensitive.) </exception>
        </member>
        <member name="M:System.Data.DataColumnCollection.Add(System.Data.DataColumn)">
            <summary>Creates and adds the specified <see cref="T:System.Data.DataColumn" /> object to the <see cref="T:System.Data.DataColumnCollection" />.</summary><param name="column">The <see cref="T:System.Data.DataColumn" /> to add. </param><exception cref="T:System.ArgumentNullException">The <paramref name="column" /> parameter is null. </exception><exception cref="T:System.ArgumentException">The column already belongs to this collection, or to another collection. </exception><exception cref="T:System.Data.DuplicateNameException">The collection already has a column with the specified name. (The comparison is not case-sensitive.) </exception><exception cref="T:System.Data.InvalidExpressionException">The expression is invalid. See the <see cref="P:System.Data.DataColumn.Expression" /> property for more information about how to create expressions. </exception>
        </member>
        <member name="M:System.Data.DataColumnCollection.Remove(System.String)">
            <summary>Removes the <see cref="T:System.Data.DataColumn" /> object that has the specified name from the collection.</summary><param name="name">The name of the column to remove. </param><exception cref="T:System.ArgumentException">The collection does not have a column with the specified name. </exception>
        </member>
        <member name="M:System.Data.DataColumnCollection.Contains(System.String)">
            <summary>Checks whether the collection contains a column with the specified name.</summary><returns>true if a column exists with this name; otherwise, false.</returns><param name="name">The <see cref="P:System.Data.DataColumn.ColumnName" /> of the column to look for. </param>
        </member>
        <member name="M:System.Data.DataColumnCollection.GetEnumerator">
            <summary>Gets an <see cref="T:System.Collections.IEnumerator" /> for the collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> for the collection.</returns>
        </member>
        <member name="M:System.Data.DataColumnCollection.CopyTo(System.Array,System.Int32)">
            <summary>Copies all the elements of the current <see cref="T:System.Data.InternalDataCollectionBase" /> to a one-dimensional <see cref="T:System.Array" />, starting at the specified <see cref="T:System.Data.InternalDataCollectionBase" /> index.</summary><param name="ar">The one-dimensional <see cref="T:System.Array" /> to copy the current <see cref="T:System.Data.InternalDataCollectionBase" /> object's elements into. </param><param name="index">The destination <see cref="T:System.Array" /> index to start copying into. </param>
        </member>
        <member name="T:System.Data.DataRow">
            <summary>Represents a row of data in a <see cref="T:System.Data.DataTable" />.</summary>
        </member>
        <member name="M:System.Data.DataRow.#ctor(System.Data.DataTable,System.Collections.IEnumerable)">
            <summary>
            Initializes a data row with specified cells.
            </summary>
            <param name="table">Data table that is the owner of this data row.</param>
            <param name="cells">Cells to be included in the data row.</param>
        </member>
        <member name="M:System.Data.DataRow.#ctor(System.Data.DataTable)">
            <summary>
            Initializes an empty data row.
            </summary>
            <param name="table">Data table that is the owner of this data row.</param>
        </member>
        <member name="P:System.Data.DataRow.Item(System.Int32)">
            <summary>Gets or sets the data stored in the column specified by index.</summary><returns>An <see cref="T:System.Object" /> that contains the data.</returns><param name="columnIndex">The zero-based index of the column. </param><exception cref="T:System.Data.DeletedRowInaccessibleException">Occurs when you try to set a value on a deleted row. </exception><exception cref="T:System.IndexOutOfRangeException">The <paramref name="columnIndex" /> argument is out of range. </exception><exception cref="T:System.InvalidCastException">Occurs when you set the value and the new value's <see cref="T:System.Type" /> does not match <see cref="P:System.Data.DataColumn.DataType" />. </exception>
        </member>
        <member name="P:System.Data.DataRow.Item(System.Data.DataColumn)">
            <summary>Gets or sets the data stored in the specified <see cref="T:System.Data.DataColumn" />.</summary><returns>An <see cref="T:System.Object" /> that contains the data.</returns><param name="column">A <see cref="T:System.Data.DataColumn" /> that contains the data. </param><exception cref="T:System.ArgumentException">The column does not belong to this table. </exception><exception cref="T:System.ArgumentNullException">The <paramref name="column" /> is null. </exception><exception cref="T:System.Data.DeletedRowInaccessibleException">An attempt was made to set a value on a deleted row. </exception><exception cref="T:System.InvalidCastException">The data types of the value and the column do not match. </exception>
        </member>
        <member name="P:System.Data.DataRow.Item(System.String)">
            <summary>Gets or sets the data stored in the column specified by name.</summary><returns>An <see cref="T:System.Object" /> that contains the data.</returns><param name="columnName">The name of the column. </param><exception cref="T:System.ArgumentException">The column specified by <paramref name="columnName" /> cannot be found. </exception><exception cref="T:System.Data.DeletedRowInaccessibleException">Occurs when you try to set a value on a deleted row. </exception><exception cref="T:System.InvalidCastException">Occurs when you set a value and its <see cref="T:System.Type" /> does not match <see cref="P:System.Data.DataColumn.DataType" />. </exception><exception cref="T:System.Data.NoNullAllowedException">Occurs when you try to insert a null value into a column where <see cref="P:System.Data.DataColumn.AllowDBNull" /> is set to false.</exception>
        </member>
        <member name="P:System.Data.DataRow.Table">
            <summary>Gets the <see cref="T:System.Data.DataTable" /> for which this row has a schema.</summary><returns>The <see cref="T:System.Data.DataTable" /> to which this row belongs.</returns>
        </member>
        <member name="P:System.Data.DataRow.RowError">
            <summary>Gets or sets the custom error description for a row.</summary><returns>The text describing an error.</returns>
        </member>
        <member name="P:System.Data.DataRow.ItemArray">
            <summary>Gets or sets all the values for this row through an array.</summary><returns>An array of type <see cref="T:System.Object" />.</returns><exception cref="T:System.ArgumentException">The array is larger than the number of columns in the table. </exception><exception cref="T:System.InvalidCastException">A value in the array does not match its <see cref="P:System.Data.DataColumn.DataType" /> in its respective <see cref="T:System.Data.DataColumn" />. </exception><exception cref="T:System.Data.ConstraintException">An edit broke a constraint. </exception><exception cref="T:System.Data.ReadOnlyException">An edit tried to change the value of a read-only column. </exception><exception cref="T:System.Data.NoNullAllowedException">An edit tried to put a null value in a column where <see cref="P:System.Data.DataColumn.AllowDBNull" /> of the <see cref="T:System.Data.DataColumn" /> object is false. </exception><exception cref="T:System.Data.DeletedRowInaccessibleException">The row has been deleted. </exception>
        </member>
        <member name="T:System.Data.DataRowCollection">
            <summary>Represents a collection of rows for a <see cref="T:System.Data.DataTable" />.</summary>
        </member>
        <member name="M:System.Data.DataRowCollection.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a collection of data rows.
            </summary>
            <param name="table">Data table that owns this collection of data rows.</param>
        </member>
        <member name="P:System.Data.DataRowCollection.Item(System.Int32)">
            <summary>Gets the row at the specified index.</summary><returns>The specified <see cref="T:System.Data.DataRow" />.</returns><param name="index">The zero-based index of the row to return. </param><exception cref="T:System.IndexOutOfRangeException">The index value is greater than the number of items in the collection. </exception>
        </member>
        <member name="P:System.Data.DataRowCollection.Count">
            <summary>Gets the total number of <see cref="T:System.Data.DataRow" /> objects in this collection.</summary><returns>The total number of <see cref="T:System.Data.DataRow" /> objects in this collection.</returns>
        </member>
        <member name="P:System.Data.DataRowCollection.IsSynchronized">
            <summary>Gets a value that indicates whether the <see cref="T:System.Data.InternalDataCollectionBase" /> is synchonized.</summary><returns>true if the collection is synchronized; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:System.Data.DataRowCollection.SyncRoot">
            <summary>Gets an object that can be used to synchronize the collection.</summary><returns>The <see cref="T:System.object" /> used to synchronize the collection.</returns>
        </member>
        <member name="M:System.Data.DataRowCollection.Add(System.Data.DataRow)">
            <summary>Adds the specified <see cref="T:System.Data.DataRow" /> to the <see cref="T:System.Data.DataRowCollection" /> object.</summary><param name="row">The <see cref="T:System.Data.DataRow" /> to add.</param><exception cref="T:System.ArgumentNullException">The row is null. </exception><exception cref="T:System.ArgumentException">The row either belongs to another table or already belongs to this table.</exception><exception cref="T:System.Data.ConstraintException">The addition invalidates a constraint. </exception><exception cref="T:System.Data.NoNullAllowedException">The addition tries to put a null in a <see cref="T:System.Data.DataColumn" /> where <see cref="P:System.Data.DataColumn.AllowDBNull" /> is false.</exception>
        </member>
        <member name="M:System.Data.DataRowCollection.Add(System.Object[])">
            <summary>Creates a row using specified values and adds it to the <see cref="T:System.Data.DataRowCollection" />.</summary><returns>None.</returns><param name="values">The array of values that are used to create the new row. </param><exception cref="T:System.ArgumentException">The array is larger than the number of columns in the table.</exception><exception cref="T:System.InvalidCastException">A value does not match its respective column type. </exception><exception cref="T:System.Data.ConstraintException">Adding the row invalidates a constraint. </exception><exception cref="T:System.Data.NoNullAllowedException">Trying to put a null in a column where <see cref="P:System.Data.DataColumn.AllowDBNull" /> is false. </exception>
        </member>
        <member name="M:System.Data.DataRowCollection.Remove(System.Data.DataRow)">
            <summary>Removes the specified <see cref="T:System.Data.DataRow" /> from the collection.</summary><param name="row">The <see cref="T:System.Data.DataRow" /> to remove. </param>
        </member>
        <member name="M:System.Data.DataRowCollection.IndexOf(System.Data.DataRow)">
            <summary>Gets the index of the specified <see cref="T:System.Data.DataRow" /> object.</summary><returns>The zero-based index of the row, or -1 if the row is not found in the collection.</returns><param name="row">The DataRow to search for.</param>
        </member>
        <member name="M:System.Data.DataRowCollection.GetEnumerator">
            <summary>Gets an <see cref="T:System.Collections.IEnumerator" /> for this collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> for this collection.</returns>
        </member>
        <member name="M:System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)">
            <summary>Copies all the <see cref="T:System.Data.DataRow" /> objects from the collection into the given array, starting at the given destination array index.</summary><param name="ar">The one-dimensional array that is the destination of the elements copied from the DataRowCollection. The array must have zero-based indexing.</param><param name="index">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="T:System.Data.DataTable">
            <summary>Represents one table of in-memory data.</summary>
        </member>
        <member name="M:System.Data.DataTable.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Data.DataTable" /> class with no arguments.</summary>
        </member>
        <member name="M:System.Data.DataTable.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Data.DataTable" /> class with the specified table name.</summary><param name="tableName">The name to give the table. If <paramref name="tableName" /> is null or an empty string, a default name is given when added to the <see cref="T:System.Data.DataTableCollection" />. </param>
        </member>
        <member name="P:System.Data.DataTable.TableName">
            <summary>Gets or sets the name of the <see cref="T:System.Data.DataTable" />.</summary><returns>The name of the <see cref="T:System.Data.DataTable" />.</returns><exception cref="T:System.ArgumentException">null or empty string ("") is passed in and this table belongs to a collection. </exception><exception cref="T:System.Data.DuplicateNameException">The table belongs to a collection that already has a table with the same name. (Comparison is case-sensitive).</exception>
        </member>
        <member name="P:System.Data.DataTable.Columns">
            <summary>Gets the collection of columns that belong to this table.</summary><returns>A <see cref="T:System.Data.DataColumnCollection" /> that contains the collection of <see cref="T:System.Data.DataColumn" /> objects for the table. An empty collection is returned if no <see cref="T:System.Data.DataColumn" /> objects exist.</returns>
        </member>
        <member name="P:System.Data.DataTable.Rows">
            <summary>Gets the collection of rows that belong to this table.</summary><returns>A <see cref="T:System.Data.DataRowCollection" /> that contains <see cref="T:System.Data.DataRow" /> objects; otherwise a null value if no <see cref="T:System.Data.DataRow" /> objects exist.</returns>
        </member>
        <member name="P:System.Data.DataTable.Locale">
            <summary>Gets or sets the locale information used to compare strings within the table.</summary><returns>A <see cref="T:System.Globalization.CultureInfo" /> that contains data about the user's machine locale. The default is the <see cref="T:System.Data.DataSet" /> object's <see cref="T:System.Globalization.CultureInfo" /> (returned by the <see cref="P:System.Data.DataSet.Locale" /> property) to which the <see cref="T:System.Data.DataTable" /> belongs; if the table doesn't belong to a <see cref="T:System.Data.DataSet" />, the default is the current system <see cref="T:System.Globalization.CultureInfo" />.</returns>
        </member>
        <member name="P:System.Data.DataTable.DefaultView">
            <summary>Gets a customized view of the table that may include a filtered view, or a cursor position.</summary><returns>The <see cref="T:System.Data.DataView" /> associated with the <see cref="T:System.Data.DataTable" />.</returns>
        </member>
        <member name="P:System.Data.DataTable.MinimumCapacity">
            <summary>Gets or sets the initial starting size for this table.</summary><returns>The initial starting size in rows of this table. The default is 50.</returns>
        </member>
        <member name="M:System.Data.DataTable.Clone">
            <summary>Clones the structure of the <see cref="T:System.Data.DataTable" />, including all <see cref="T:System.Data.DataTable" /> schemas and constraints.</summary><returns>A new <see cref="T:System.Data.DataTable" /> with the same schema as the current <see cref="T:System.Data.DataTable" />.</returns>
        </member>
        <member name="M:System.Data.DataTable.Copy">
            <summary>Copies both the structure and data for this <see cref="T:System.Data.DataTable" />.</summary><returns>A new <see cref="T:System.Data.DataTable" /> with the same structure (table schemas and constraints) and data as this <see cref="T:System.Data.DataTable" />.If these classes have been derived, the copy will also be of the same derived classes.<see cref="M:System.Data.DataTable.Copy" /> creates a new <see cref="T:System.Data.DataTable" /> with the same structure and data as the original <see cref="T:System.Data.DataTable" />. To copy the structure to a new <see cref="T:System.Data.DataTable" />, but not the data, use <see cref="M:System.Data.DataTable.Clone" />.</returns>
        </member>
        <member name="M:System.Data.DataTable.ImportRow(System.Data.DataRow)">
            <summary>Copies a <see cref="T:System.Data.DataRow" /> into a <see cref="T:System.Data.DataTable" />, preserving any property settings, as well as original and current values.</summary><param name="row">The <see cref="T:System.Data.DataRow" /> to be imported. </param>
        </member>
        <member name="M:System.Data.DataTable.NewRow">
            <summary>Creates a new <see cref="T:System.Data.DataRow" /> with the same schema as the table.</summary><returns>A <see cref="T:System.Data.DataRow" /> with the same schema as the <see cref="T:System.Data.DataTable" />.</returns>
        </member>
        <member name="M:System.Data.DataTable.Select(System.String,System.String)">
            <summary>Gets an array of all <see cref="T:System.Data.DataRow" /> objects that match the filter criteria, in the specified sort order.</summary><returns>An array of <see cref="T:System.Data.DataRow" /> objects matching the filter expression.</returns><param name="filterExpression">The criteria to use to filter the rows. For examples on how to filter rows, see DataView RowFilter Syntax [C#].</param><param name="sort">A string specifying the column and sort direction. </param>
        </member>
        <member name="M:System.Data.DataTable.Load(System.Data.IDataReader)">
            <summary>Fills a <see cref="T:System.Data.DataTable" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />. If the <see cref="T:System.Data.DataTable" /> already contains rows, the incoming data from the data source is merged with the existing rows.</summary><param name="reader">An <see cref="T:System.Data.IDataReader" /> that provides a result set.</param>
        </member>
        <member name="T:System.Data.DataView">
            <summary>Represents a databindable, customized view of a <see cref="T:System.Data.DataTable" /> for sorting, filtering, searching, editing, and navigation. The <see cref="T:System.Data.DataView" /> does not store data, but instead represents a connected view of its corresponding <see cref="T:System.Data.DataTable" />. Changes to the <see cref="T:System.Data.DataView" />’s data will affect the <see cref="T:System.Data.DataTable" />. Changes to the <see cref="T:System.Data.DataTable" />’s data will affect all <see cref="T:System.Data.DataView" />s associated with it.</summary>
        </member>
        <member name="M:System.Data.DataView.#ctor(System.Data.DataTable)">
            <summary>Initializes a new instance of the <see cref="T:System.Data.DataView" /> class with the specified <see cref="T:System.Data.DataTable" />.</summary><param name="table">A <see cref="T:System.Data.DataTable" /> to add to the <see cref="T:System.Data.DataView" />. </param>
        </member>
        <member name="M:System.Data.DataView.ToTable(System.Boolean,System.String[])">
            <summary>Creates and returns a new <see cref="T:System.Data.DataTable" /> based on rows in an existing <see cref="T:System.Data.DataView" />.</summary><returns>A new <see cref="T:System.Data.DataTable" /> instance that contains the requested rows and columns.</returns><param name="distinct">If true, the returned <see cref="T:System.Data.DataTable" /> contains rows that have distinct values for all its columns. The default value is false.</param><param name="columnNames">A string array that contains a list of the column names to be included in the returned <see cref="T:System.Data.DataTable" />. The <see cref="T:System.Data.DataTable" /> contains the specified columns in the order they appear within this array.</param>
        </member>
        <member name="T:System.Data.DbType">
            <summary>Specifies the data type of a field, a property, or a Parameter object of a .NET Framework data provider.</summary>
        </member>
        <member name="F:System.Data.DbType.String">
            <summary>A type representing Unicode character strings.</summary>
        </member>
        <member name="T:System.Data.IDataReader">
            <summary>Provides a means of reading one or more forward-only streams of result sets obtained by executing a command at a data source, and is implemented by .NET Framework data providers that access relational databases.</summary>
        </member>
        <member name="P:System.Data.IDataReader.Depth">
            <summary>Gets a value indicating the depth of nesting for the current row.</summary><returns>The level of nesting.</returns>
        </member>
        <member name="P:System.Data.IDataReader.IsClosed">
            <summary>Gets a value indicating whether the data reader is closed.</summary><returns>true if the data reader is closed; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.IDataReader.RecordsAffected">
            <summary>Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.</summary><returns>The number of rows changed, inserted, or deleted; 0 if no rows were affected or the statement failed; and -1 for SELECT statements.</returns>
        </member>
        <member name="M:System.Data.IDataReader.Close">
            <summary>Closes the <see cref="T:System.Data.IDataReader" /> Object.</summary>
        </member>
        <member name="M:System.Data.IDataReader.GetSchemaTable">
            <summary>Returns a <see cref="T:System.Data.DataTable" /> that describes the column metadata of the <see cref="T:System.Data.IDataReader" />.</summary><returns>A <see cref="T:System.Data.DataTable" /> that describes the column metadata.</returns><exception cref="T:System.InvalidOperationException">The <see cref="T:System.Data.IDataReader" /> is closed. </exception>
        </member>
        <member name="M:System.Data.IDataReader.NextResult">
            <summary>Advances the data reader to the next result, when reading the results of batch SQL statements.</summary><returns>true if there are more rows; otherwise, false.</returns>
        </member>
        <member name="M:System.Data.IDataReader.Read">
            <summary>Advances the <see cref="T:System.Data.IDataReader" /> to the next record.</summary><returns>true if there are more rows; otherwise, false.</returns>
        </member>
        <member name="T:System.Data.IDataRecord">
            <summary>Provides access to the column values within each row for a DataReader, and is implemented by .NET Framework data providers that access relational databases.</summary>
        </member>
        <member name="P:System.Data.IDataRecord.FieldCount">
            <summary>Gets the number of columns in the current row.</summary><returns>When not positioned in a valid recordset, 0; otherwise, the number of columns in the current record. The default is -1.</returns>
        </member>
        <member name="P:System.Data.IDataRecord.Item(System.Int32)">
            <summary>Gets the column located at the specified index.</summary><returns>The column located at the specified index as an <see cref="T:System.Object" />.</returns><param name="i">The zero-based index of the column to get. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="P:System.Data.IDataRecord.Item(System.String)">
            <summary>Gets the column with the specified name.</summary><returns>The column with the specified name as an <see cref="T:System.Object" />.</returns><param name="name">The name of the column to find. </param><exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.GetName(System.Int32)">
            <summary>Gets the name for the field to find.</summary><returns>The name of the field or the empty string (""), if there is no value to return.</returns><param name="i">The index of the field to find. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.GetDataTypeName(System.Int32)">
            <summary>Gets the data type information for the specified field.</summary><returns>The data type information for the specified field.</returns><param name="i">The index of the field to find. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.GetFieldType(System.Int32)">
            <summary>Gets the <see cref="T:System.Type" /> information corresponding to the type of <see cref="T:System.Object" /> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />.</summary><returns>The <see cref="T:System.Type" /> information corresponding to the type of <see cref="T:System.Object" /> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />.</returns><param name="i">The index of the field to find. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.GetValue(System.Int32)">
            <summary>Return the value of the specified field.</summary><returns>The <see cref="T:System.Object" /> which will contain the field value upon return.</returns><param name="i">The index of the field to find. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.GetValues(System.Object[])">
            <summary>Populates an array of objects with the column values of the current record.</summary><returns>The number of instances of <see cref="T:System.Object" /> in the array.</returns><param name="values">An array of <see cref="T:System.Object" /> to copy the attribute fields into. </param>
        </member>
        <member name="M:System.Data.IDataRecord.GetOrdinal(System.String)">
            <summary>Return the index of the named field.</summary><returns>The index of the named field.</returns><param name="name">The name of the field to find. </param>
        </member>
        <member name="M:System.Data.IDataRecord.GetBoolean(System.Int32)">
            <summary>Gets the value of the specified column as a Boolean.</summary><returns>The value of the column.</returns><param name="i">The zero-based column ordinal. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.GetByte(System.Int32)">
            <summary>Gets the 8-bit unsigned integer value of the specified column.</summary><returns>The 8-bit unsigned integer value of the specified column.</returns><param name="i">The zero-based column ordinal. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.</summary><returns>The actual number of bytes read.</returns><param name="i">The zero-based column ordinal. </param><param name="fieldOffset">The index within the field from which to start the read operation. </param><param name="buffer">The buffer into which to read the stream of bytes. </param><param name="bufferoffset">The index for <paramref name="buffer" /> to start the read operation. </param><param name="length">The number of bytes to read. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.GetChar(System.Int32)">
            <summary>Gets the character value of the specified column.</summary><returns>The character value of the specified column.</returns><param name="i">The zero-based column ordinal. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.</summary><returns>The actual number of characters read.</returns><param name="i">The zero-based column ordinal. </param><param name="fieldoffset">The index within the row from which to start the read operation. </param><param name="buffer">The buffer into which to read the stream of bytes. </param><param name="bufferoffset">The index for <paramref name="buffer" /> to start the read operation. </param><param name="length">The number of bytes to read. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.GetGuid(System.Int32)">
            <summary>Returns the GUID value of the specified field.</summary><returns>The GUID value of the specified field.</returns><param name="i">The index of the field to find. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.GetInt16(System.Int32)">
            <summary>Gets the 16-bit signed integer value of the specified field.</summary><returns>The 16-bit signed integer value of the specified field.</returns><param name="i">The index of the field to find. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.GetInt32(System.Int32)">
            <summary>Gets the 32-bit signed integer value of the specified field.</summary><returns>The 32-bit signed integer value of the specified field.</returns><param name="i">The index of the field to find. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.GetInt64(System.Int32)">
            <summary>Gets the 64-bit signed integer value of the specified field.</summary><returns>The 64-bit signed integer value of the specified field.</returns><param name="i">The index of the field to find. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.GetFloat(System.Int32)">
            <summary>Gets the single-precision floating point number of the specified field.</summary><returns>The single-precision floating point number of the specified field.</returns><param name="i">The index of the field to find. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.GetDouble(System.Int32)">
            <summary>Gets the double-precision floating point number of the specified field.</summary><returns>The double-precision floating point number of the specified field.</returns><param name="i">The index of the field to find. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.GetString(System.Int32)">
            <summary>Gets the string value of the specified field.</summary><returns>The string value of the specified field.</returns><param name="i">The index of the field to find. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.GetDecimal(System.Int32)">
            <summary>Gets the fixed-position numeric value of the specified field.</summary><returns>The fixed-position numeric value of the specified field.</returns><param name="i">The index of the field to find. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.GetDateTime(System.Int32)">
            <summary>Gets the date and time data value of the specified field.</summary><returns>The date and time data value of the specified field.</returns><param name="i">The index of the field to find. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.GetData(System.Int32)">
            <summary>Returns an <see cref="T:System.Data.IDataReader" /> for the specified column ordinal.</summary><returns>The <see cref="T:System.Data.IDataReader" /> for the specified column ordinal.</returns><param name="i">The index of the field to find. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:System.Data.IDataRecord.IsDBNull(System.Int32)">
            <summary>Return whether the specified field is set to null.</summary><returns>true if the specified field is set to null; otherwise, false.</returns><param name="i">The index of the field to find. </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="T:System.DBNull">
            <!-- No matching elements were found for the following include tag --><include file="_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;T:System.DBNull&quot;]/*" />
        </member>
        <member name="F:System.DBNull.Value">
            <!-- No matching elements were found for the following include tag --><include file="_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;F:System.DBNull.Value&quot;]/*" />
        </member>
        <member name="T:System.Diagnostics.Process">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/System.xml" path="doc/members/member[@name=&quot;T:System.Diagnostics.Process&quot;]/*" />
        </member>
        <member name="M:System.Diagnostics.Process.#ctor">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Diagnostics.Process.#ctor&quot;]/*" />
        </member>
        <member name="P:System.Diagnostics.Process.ProcessorAffinity">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/System.xml" path="doc/members/member[@name=&quot;P:System.Diagnostics.Process.ProcessorAffinity&quot;]/*" />
        </member>
        <member name="M:System.Diagnostics.Process.GetCurrentProcess">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Diagnostics.Process.GetCurrentProcess&quot;]/*" />
        </member>
        <member name="T:System.Diagnostics.StackTrace">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/System.xml" path="doc/members/member[@name=&quot;T:System.Diagnostics.StackTrace&quot;]/*" />
        </member>
        <member name="T:System.Diagnostics.Trace">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/System.xml" path="doc/members/member[@name=&quot;T:System.Diagnostics.Trace&quot;]/*" />
        </member>
        <member name="M:System.Diagnostics.Trace.Write(System.String)">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Diagnostics.Trace.Write(System.String)&quot;]/*" />
        </member>
        <member name="M:System.Diagnostics.Trace.WriteLine(System.String)">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Diagnostics.Trace.WriteLine(System.String)&quot;]/*" />
        </member>
        <member name="M:System.Diagnostics.Trace.TraceWarning(System.String)">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Diagnostics.Trace.TraceWarning(System.String)&quot;]/*" />
        </member>
        <member name="M:System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])&quot;]/*" />
        </member>
        <member name="M:System.Diagnostics.Trace.Assert(System.Boolean)">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Diagnostics.Trace.Assert(System.Boolean)&quot;]/*" />
        </member>
        <member name="T:System.ICloneable">
            <summary>Supports cloning, which creates a new instance of a class with the same value as an existing instance.</summary>
        </member>
        <member name="M:System.ICloneable.Clone">
            <summary>Creates a new object that is a copy of the current instance.</summary><returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:System.IConvertible">
            <summary>Defines methods that convert the value of the implementing reference or value type to a common language runtime type that has an equivalent value.</summary>
        </member>
        <member name="T:System.IO.DirectoryInfo">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;T:System.IO.DirectoryInfo&quot;]/*" />
        </member>
        <member name="M:System.IO.DirectoryInfo.#ctor(System.String)">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;M:System.IO.DirectoryInfo.#ctor(System.String)&quot;]/*" />
        </member>
        <member name="P:System.IO.DirectoryInfo.Exists">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;P:System.IO.DirectoryInfo.Exists&quot;]/*" />
        </member>
        <member name="P:System.IO.DirectoryInfo.Parent">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;P:System.IO.DirectoryInfo.Parent&quot;]/*" />
        </member>
        <member name="P:System.IO.DirectoryInfo.Name">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;P:System.IO.DirectoryInfo.Name&quot;]/*" />
        </member>
        <member name="P:System.IO.DirectoryInfo.FullName">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;P:System.IO.DirectoryInfo.FullName&quot;]/*" />
        </member>
        <member name="M:System.IO.DirectoryInfo.Create">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;M:System.IO.DirectoryInfo.Create&quot;]/*" />
        </member>
        <member name="M:System.IO.DirectoryInfo.GetFiles">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;M:System.IO.DirectoryInfo.GetFiles&quot;]/*" />
        </member>
        <member name="M:System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;M:System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption&quot;]/*" />
        </member>
        <member name="T:System.IO.FileAccess">
            <summary>Defines constants for read, write, or read/write access to a file.</summary>
        </member>
        <member name="F:System.IO.FileAccess.Read">
            <summary>Read access to the file. Data can be read from the file. Combine with Write for read/write access.</summary>
        </member>
        <member name="F:System.IO.FileAccess.Write">
            <summary>Write access to the file. Data can be written to the file. Combine with Read for read/write access.</summary>
        </member>
        <member name="F:System.IO.FileAccess.ReadWrite">
            <summary>Read and write access to the file. Data can be written to and read from the file.</summary>
        </member>
        <member name="T:System.IO.FileAttributes">
            <summary>Provides attributes for files and directories.</summary>
        </member>
        <member name="F:System.IO.FileAttributes.ReadOnly">
            <summary>The file is read-only.</summary>
        </member>
        <member name="F:System.IO.FileAttributes.Hidden">
            <summary>The file is hidden, and thus is not included in an ordinary directory listing.</summary>
        </member>
        <member name="F:System.IO.FileAttributes.System">
            <summary>The file is a system file. That is, the file is part of the operating system or is used exclusively by the operating system.</summary>
        </member>
        <member name="F:System.IO.FileAttributes.Directory">
            <summary>The file is a directory.</summary>
        </member>
        <member name="F:System.IO.FileAttributes.Archive">
            <summary>The file is a candidate for backup or removal. </summary>
        </member>
        <member name="F:System.IO.FileAttributes.Device">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:System.IO.FileAttributes.Normal">
            <summary>The file is a standard file that has no special attributes. This attribute is valid only if it is used alone.</summary>
        </member>
        <member name="F:System.IO.FileAttributes.Temporary">
            <summary>The file is temporary. A temporary file contains data that is needed while an application is executing but is not needed after the application is finished. File systems try to keep all the data in memory for quicker access rather than flushing the data back to mass storage. A temporary file should be deleted by the application as soon as it is no longer needed.</summary>
        </member>
        <member name="F:System.IO.FileAttributes.SparseFile">
            <summary>The file is a sparse file. Sparse files are typically large files whose data consists of mostly zeros.</summary>
        </member>
        <member name="F:System.IO.FileAttributes.ReparsePoint">
            <summary>The file contains a reparse point, which is a block of user-defined data associated with a file or a directory.</summary>
        </member>
        <member name="F:System.IO.FileAttributes.Compressed">
            <summary>The file is compressed.</summary>
        </member>
        <member name="F:System.IO.FileAttributes.Offline">
            <summary>The file is offline. The data of the file is not immediately available.</summary>
        </member>
        <member name="F:System.IO.FileAttributes.NotContentIndexed">
            <summary>The file will not be indexed by the operating system's content indexing service.</summary>
        </member>
        <member name="F:System.IO.FileAttributes.Encrypted">
            <summary>The file or directory is encrypted. For a file, this means that all data in the file is encrypted. For a directory, this means that encryption is the default for newly created files and directories.</summary>
        </member>
        <member name="T:System.IO.FileMode">
            <summary>Specifies how the operating system should open a file.</summary>
        </member>
        <member name="F:System.IO.FileMode.CreateNew">
            <summary>Specifies that the operating system should create a new file. This requires <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> permission. If the file already exists, an <see cref="T:System.IO.IOException" /> exception is thrown.</summary>
        </member>
        <member name="F:System.IO.FileMode.Create">
            <summary>Specifies that the operating system should create a new file. If the file already exists, it will be overwritten. This requires <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> permission. FileMode.Create is equivalent to requesting that if the file does not exist, use <see cref="F:System.IO.FileMode.CreateNew" />; otherwise, use <see cref="F:System.IO.FileMode.Truncate" />. If the file already exists but is a hidden file, an <see cref="T:System.UnauthorizedAccessException" /> exception is thrown.</summary>
        </member>
        <member name="F:System.IO.FileMode.Open">
            <summary>Specifies that the operating system should open an existing file. The ability to open the file is dependent on the value specified by the <see cref="T:System.IO.FileAccess" /> enumeration. A <see cref="T:System.IO.FileNotFoundException" /> exception is thrown if the file does not exist.</summary>
        </member>
        <member name="F:System.IO.FileMode.OpenOrCreate">
            <summary>Specifies that the operating system should open a file if it exists; otherwise, a new file should be created. If the file is opened with FileAccess.Read, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> permission is required. If the file access is FileAccess.Write, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> permission is required. If the file is opened with FileAccess.ReadWrite, both <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> permissions are required.  </summary>
        </member>
        <member name="F:System.IO.FileMode.Truncate">
            <summary>Specifies that the operating system should open an existing file. When the file is opened, it should be truncated so that its size is zero bytes. This requires <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> permission. Attempts to read from a file opened with FileMode.Truncate cause an <see cref="T:System.ArgumentException" /> exception.</summary>
        </member>
        <member name="F:System.IO.FileMode.Append">
            <summary>Opens the file if it exists and seeks to the end of the file, or creates a new file. This requires <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /> permission. FileMode.Append can be used only in conjunction with FileAccess.Write. Trying to seek to a position before the end of the file throws an <see cref="T:System.IO.IOException" /> exception, and any attempt to read fails and throws a <see cref="T:System.NotSupportedException" /> exception.</summary>
        </member>
        <member name="T:System.IO.FileShare">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;T:System.IO.FileShare&quot;]/*" />
        </member>
        <member name="F:System.IO.FileShare.None">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;F:System.IO.FileShare.None&quot;]/*" />
        </member>
        <member name="F:System.IO.FileShare.Read">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;F:System.IO.FileShare.Read&quot;]/*" />
        </member>
        <member name="T:System.IO.SearchOption">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;T:System.IO.SearchOption&quot;]/*" />
        </member>
        <member name="F:System.IO.SearchOption.TopDirectoryOnly">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;F:System.IO.SearchOption.TopDirectoryOnly&quot;]/*" />
        </member>
        <member name="F:System.IO.SearchOption.AllDirectories">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;F:System.IO.SearchOption.AllDirectories&quot;]/*" />
        </member>
        <member name="T:System.IO.Directory">
            <!-- No matching elements were found for the following include tag --><include file="../../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;T:System.IO.Directory&quot;]/*" />
        </member>
        <member name="M:System.IO.Directory.Exists(System.String)">
            <!-- No matching elements were found for the following include tag --><include file="../../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;M:System.IO.Directory.Exists(System.String)&quot;]/*" />
        </member>
        <member name="M:System.IO.Directory.CreateDirectory(System.String)">
            <!-- No matching elements were found for the following include tag --><include file="../../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;M:System.IO.Directory.CreateDirectory(System.String)&quot;]/*" />
        </member>
        <member name="M:System.IO.Directory.GetDirectories(System.String)">
            <!-- No matching elements were found for the following include tag --><include file="../../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;M:System.IO.Directory.GetDirectories(System.String)&quot;]/*" />
        </member>
        <member name="M:System.IO.Directory.GetFiles(System.String)">
            <!-- No matching elements were found for the following include tag --><include file="../../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;M:System.IO.Directory.GetFiles(System.String)&quot;]/*" />
        </member>
        <member name="M:System.IO.Directory.GetFiles(System.String,System.String)">
            <!-- No matching elements were found for the following include tag --><include file="../../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;M:System.IO.Directory.GetFiles(System.String,System.String)&quot;]/*" />
        </member>
        <member name="M:System.IO.Directory.Move(System.String,System.String)">
            <!-- No matching elements were found for the following include tag --><include file="../../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;M:System.IO.Directory.Move(System.String,System.String)&quot;]/*" />
        </member>
        <member name="M:System.IO.Directory.GetStorageFolder(System.String)">
            <summary>
            Get storage folder from specified directory path.
            </summary>
            <param name="path">Directory path.</param>
            <returns>Storage folder (task) for specified directory path.</returns>
        </member>
        <member name="T:System.IO.File">
            <summary>Provides static methods for the creation, copying, deletion, moving, and opening of a single file, and aids in the creation of <see cref="T:System.IO.FileStream" /> objects.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
        </member>
        <member name="M:System.IO.File.Exists(System.String)">
            <summary>Determines whether the specified file exists.</summary><returns>true if the caller has the required permissions and <paramref name="path" /> contains the name of an existing file; otherwise, false. This method also returns false if <paramref name="path" /> is null, an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of <paramref name="path" />.</returns><param name="path">The file to check. </param>
        </member>
        <member name="M:System.IO.File.Delete(System.String)">
            <summary>Deletes the specified file. </summary><param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">The specified file is in use. -or-There is an open handle on the file, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- The file is an executable file that is in use.-or- <paramref name="path" /> is a directory.-or- <paramref name="path" /> specified a read-only file. </exception>
        </member>
        <member name="M:System.IO.File.Create(System.String)">
            <summary>Creates or overwrites a file in the specified path.</summary><returns>A <see cref="T:System.IO.FileStream" /> that provides read/write access to the file specified in <paramref name="path" />.</returns><param name="path">The path and name of the file to create. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path" /> specified a file that is read-only. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while creating the file. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
        </member>
        <member name="M:System.IO.File.CreateText(System.String)">
            <summary>Creates or opens a file for writing UTF-8 encoded text.</summary><returns>A <see cref="T:System.IO.StreamWriter" /> that writes to the specified file using UTF-8 encoding.</returns><param name="path">The file to be opened for writing. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
        </member>
        <member name="M:System.IO.File.AppendText(System.String)">
            <summary>Creates a <see cref="T:System.IO.StreamWriter" /> that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist.</summary><returns>A stream writer that appends UTF-8 encoded text to the specified file or to a new file.</returns><param name="path">The path to the file to append to. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
        </member>
        <member name="M:System.IO.File.OpenText(System.String)">
            <summary>Opens an existing UTF-8 encoded text file for reading.</summary><returns>A <see cref="T:System.IO.StreamReader" /> on the specified path.</returns><param name="path">The file to be opened for reading. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
        </member>
        <member name="M:System.IO.File.Move(System.String,System.String)">
            <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary><param name="sourceFileName">The name of the file to move. Can include a relative or absolute path.</param><param name="destFileName">The new path and name for the file.</param><exception cref="T:System.IO.IOException">The destination file already exists.-or-<paramref name="sourceFileName" /> was not found. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is null. </exception><exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="F:System.IO.Path.InvalidPathChars" />. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is invalid, (for example, it is on an unmapped drive). </exception><exception cref="T:System.NotSupportedException">
        <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is in an invalid format. </exception>
        </member>
        <member name="M:System.IO.File.ReadAllBytes(System.String)">
            <summary>Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</summary><returns>A byte array containing the contents of the file.</returns><param name="path">The file to open for reading. </param><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:System.IO.File.ReadAllLines(System.String)">
            <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary><returns>A string array containing all lines of the file.</returns><param name="path">The file to open for reading. </param><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:System.IO.File.ReadAllText(System.String)">
            <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary><returns>A string containing all lines of the file.</returns><param name="path">The file to open for reading. </param><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:System.IO.File.ReadLines(System.String)">
            <summary>Reads the lines of a file.</summary><returns>All the lines of the file, or the lines that are the result of a query.</returns><param name="path">The file to read.</param><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception><exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path" /> is a directory.-or-The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.File.WriteAllBytes(System.String,System.Byte[])">
            <summary>Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.</summary><param name="path">The file to write to. </param><param name="bytes">The bytes to write to the file. </param><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null or the byte array is empty. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:System.IO.File.WriteAllLines(System.String,System.String[])">
            <summary>Creates a new file, write the specified string array to the file, and then closes the file. </summary><param name="path">The file to write to. </param><param name="contents">The string array to write to the file. </param><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception><exception cref="T:System.ArgumentNullException">Either <paramref name="path" /> or <paramref name="contents" /> is null.  </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Creates a new file, writes a collection of strings to the file, and then closes the file.</summary><param name="path">The file to write to.</param><param name="contents">The lines to write to the file.</param><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException">Either<paramref name=" path " />or <paramref name="contents" /> is null.</exception><exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path" /> is a directory.-or-The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.File.WriteAllText(System.String,System.String)">
            <summary>Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.</summary><param name="path">The file to write to. </param><param name="contents">The string to write to the file. </param><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null or <paramref name="contents" /> is empty.  </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary><param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param><param name="contents">The lines to append to the file.</param><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException">Either<paramref name=" path " />or <paramref name="contents" /> is null.</exception><exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have permission to write to the file.</exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path" /> is a directory.</exception>
        </member>
        <member name="M:System.IO.File.AppendAllText(System.String,System.String)">
            <summary>Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.</summary><param name="path">The file to append the specified string to. </param><param name="contents">The string to append to the file. </param><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:System.IO.File.GetAttributes(System.String)">
            <summary>Gets the <see cref="T:System.IO.FileAttributes" /> of the file on the path.</summary><returns>The <see cref="T:System.IO.FileAttributes" /> of the file on the path.</returns><param name="path">The path to the file. </param><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception><exception cref="T:System.IO.FileNotFoundException">
        <paramref name="path" /> represents a file and is invalid, such as being on an unmapped drive, or the file cannot be found. </exception><exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> represents a directory and is invalid, such as being on an unmapped drive, or the directory cannot be found.</exception><exception cref="T:System.IO.IOException">This file is being used by another process.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>Sets the specified <see cref="T:System.IO.FileAttributes" /> of the file on the specified path.</summary><param name="path">The path to the file. </param><param name="fileAttributes">A bitwise combination of the enumeration values. </param><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty, contains only white spaces, contains invalid characters, or the file attribute is invalid. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.File.Open(System.String,System.IO.FileMode)">
            <summary>Opens a <see cref="T:System.IO.FileStream" /> on the specified path with read/write access.</summary><returns>A <see cref="T:System.IO.FileStream" /> opened in the specified mode and path, with read/write access and not shared.</returns><param name="path">The file to open. </param><param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. -or-<paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" /> and the specified file is a hidden file.</exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> specified an invalid value. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
        </member>
        <member name="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>Opens a <see cref="T:System.IO.FileStream" /> on the specified path, with the specified mode and access.</summary><returns>An unshared <see cref="T:System.IO.FileStream" /> that provides access to the specified file, with the specified mode and access.</returns><param name="path">The file to open. </param><param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param><param name="access">A <see cref="T:System.IO.FileAccess" /> value that specifies the operations that can be performed on the file. </param><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.-or- <paramref name="access" /> specified Read and <paramref name="mode" /> specified Create, CreateNew, Truncate, or Append. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only and <paramref name="access" /> is not Read.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. -or-<paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" /> and the specified file is a hidden file.</exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> or <paramref name="access" /> specified an invalid value. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
        </member>
        <member name="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Opens a <see cref="T:System.IO.FileStream" /> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</summary><returns>A <see cref="T:System.IO.FileStream" /> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns><param name="path">The file to open. </param><param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param><param name="access">A <see cref="T:System.IO.FileAccess" /> value that specifies the operations that can be performed on the file. </param><param name="share">A <see cref="T:System.IO.FileShare" /> value specifying the type of access other threads have to the file. </param><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.-or- <paramref name="access" /> specified Read and <paramref name="mode" /> specified Create, CreateNew, Truncate, or Append. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only and <paramref name="access" /> is not Read.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. -or-<paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" /> and the specified file is a hidden file.</exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> specified an invalid value. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
        </member>
        <member name="M:System.IO.File.OpenRead(System.String)">
            <summary>Opens an existing file for reading.</summary><returns>A read-only <see cref="T:System.IO.FileStream" /> on the specified path.</returns><param name="path">The file to be opened for reading. </param><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
        </member>
        <member name="M:System.IO.File.OpenWrite(System.String)">
            <summary>Opens an existing file or creates a new file for writing.</summary><returns>An unshared <see cref="T:System.IO.FileStream" /> object on the specified path with <see cref="F:System.IO.FileAccess.Write" /> access.</returns><param name="path">The file to be opened for writing. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path" /> specified a read-only file or directory. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
        </member>
        <member name="T:System.IO.FileInfo">
            <summary>Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream" /> objects. This class cannot be inherited.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
        </member>
        <member name="M:System.IO.FileInfo.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.IO.FileInfo" /> class, which acts as a wrapper for a file path.</summary><param name="fileName">The fully qualified name of the new file, or the relative file name. Do not end the path with the directory separator character.</param><exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">The file name is empty, contains only white spaces, or contains invalid characters. </exception><exception cref="T:System.UnauthorizedAccessException">Access to <paramref name="fileName" /> is denied. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="fileName" /> contains a colon (:) in the middle of the string. </exception>
        </member>
        <member name="P:System.IO.FileInfo.Attributes">
            <!-- No matching elements were found for the following include tag --><include file="../../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;P:System.IO.FileSystemInfo.Attributes&quot;]/*" />
        </member>
        <member name="P:System.IO.FileInfo.FullName">
            <!-- No matching elements were found for the following include tag --><include file="../../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;P:System.IO.FileSystemInfo.FullName&quot;]/*" />
        </member>
        <member name="P:System.IO.FileInfo.Name">
            <summary>Gets the name of the file.</summary><returns>The name of the file.</returns>
        </member>
        <member name="P:System.IO.FileInfo.DirectoryName">
            <summary>Gets a string representing the directory's full path.</summary><returns>A string representing the directory's full path.</returns><exception cref="T:System.ArgumentNullException">null was passed in for the directory name. </exception><exception cref="T:System.IO.PathTooLongException">The fully qualified path is 260 or more characters.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:System.IO.FileInfo.Exists">
            <summary>Gets a value indicating whether a file exists.</summary><returns>true if the file exists; false if the file does not exist or if the file is a directory.</returns>
        </member>
        <member name="P:System.IO.FileInfo.Extension">
            <!-- No matching elements were found for the following include tag --><include file="../../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;P:System.IO.FileInfo.Extension&quot;]/*" />
        </member>
        <member name="P:System.IO.FileInfo.Directory">
            <summary>Gets an instance of the parent directory.</summary><returns>A <see cref="T:System.IO.DirectoryInfo" /> object representing the parent directory of this file.</returns><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:System.IO.FileInfo.Delete">
            <summary>Permanently deletes a file.</summary><exception cref="T:System.IO.IOException">The target file is open or memory-mapped on a computer running Microsoft Windows NT.-or-There is an open handle on the file, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><exception cref="T:System.UnauthorizedAccessException">The path is a directory. </exception>
        </member>
        <member name="M:System.IO.FileInfo.Create">
            <summary>Creates a file.</summary><returns>A new file.</returns>
        </member>
        <member name="M:System.IO.FileInfo.OpenRead">
            <summary>Creates a read-only <see cref="T:System.IO.FileStream" />.</summary><returns>A new read-only <see cref="T:System.IO.FileStream" /> object.</returns><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> is read-only or is a directory. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><exception cref="T:System.IO.IOException">The file is already open. </exception>
        </member>
        <member name="M:System.IO.FileInfo.OpenWrite">
            <summary>Creates a write-only <see cref="T:System.IO.FileStream" />.</summary><returns>A write-only unshared <see cref="T:System.IO.FileStream" /> object for a new or existing file.</returns><exception cref="T:System.UnauthorizedAccessException">The path specified when creating an instance of the <see cref="T:System.IO.FileInfo" /> object is read-only or is a directory.  </exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified when creating an instance of the <see cref="T:System.IO.FileInfo" /> object is invalid, such as being on an unmapped drive. </exception>
        </member>
        <member name="M:System.IO.FileInfo.MoveTo(System.String)">
            <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary><param name="destFileName">The path to move the file to, which can specify a different file name. </param><exception cref="T:System.IO.IOException">An I/O error occurs, such as the destination file already exists or the destination device is not ready. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="destFileName" /> is null. </exception><exception cref="T:System.ArgumentException">
        <paramref name="destFileName" /> is empty, contains only white spaces, or contains invalid characters. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="destFileName" /> is read-only or is a directory. </exception><exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="destFileName" /> contains a colon (:) in the middle of the string. </exception>
        </member>
        <member name="T:System.IO.FileStream">
            <summary>Provides a <see cref="T:System.IO.Stream" /> for a file, supporting both synchronous and asynchronous read and write operations.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
        </member>
        <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
            <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path and creation mode.</summary><param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate. </param><param name="mode">A constant that determines how to open or create the file. </param><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is FileMode.Truncate or FileMode.Open, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes. </exception><exception cref="T:System.IO.IOException">An I/O error, such as specifying FileMode.CreateNew when the file specified by <paramref name="path" /> already exists, occurred.-or-The stream has been closed. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> contains an invalid value. </exception>
        </member>
        <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, and read/write permission.</summary><param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate. </param><param name="mode">A constant that determines how to open or create the file. </param><param name="access">A constant that determines how the file can be accessed by the FileStream object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the FileStream object. <see cref="P:System.IO.FileStream.CanSeek" /> is true if <paramref name="path" /> specifies a disk file. </param><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception><exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is FileMode.Truncate or FileMode.Open, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes. </exception><exception cref="T:System.IO.IOException">An I/O error, such as specifying FileMode.CreateNew when the file specified by <paramref name="path" /> already exists, occurred. -or-The stream has been closed.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is Write or ReadWrite and the file or directory is set for read-only access. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> contains an invalid value. </exception>
        </member>
        <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write permission, and sharing permission.</summary><param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate. </param><param name="mode">A constant that determines how to open or create the file. </param><param name="access">A constant that determines how the file can be accessed by the FileStream object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the FileStream object. <see cref="P:System.IO.FileStream.CanSeek" /> is true if <paramref name="path" /> specifies a disk file. </param><param name="share">A constant that determines how the file will be shared by processes. </param><exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception><exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception><exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is FileMode.Truncate or FileMode.Open, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes. </exception><exception cref="T:System.IO.IOException">An I/O error, such as specifying FileMode.CreateNew when the file specified by <paramref name="path" /> already exists, occurred. -or-The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share" /> is set to FileShare.Delete.-or-The stream has been closed.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is Write or ReadWrite and the file or directory is set for read-only access. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> contains an invalid value. </exception>
        </member>
        <member name="P:System.IO.FileStream.CanRead">
            <summary>Gets a value indicating whether the current stream supports reading.</summary><returns>true if the stream supports reading; false if the stream is closed or was opened with write-only access.</returns>
        </member>
        <member name="P:System.IO.FileStream.CanSeek">
            <summary>Gets a value indicating whether the current stream supports seeking.</summary><returns>true if the stream supports seeking; false if the stream is closed or if the FileStream was constructed from an operating-system handle such as a pipe or output to the console.</returns>
        </member>
        <member name="P:System.IO.FileStream.CanWrite">
            <summary>Gets a value indicating whether the current stream supports writing.</summary><returns>true if the stream supports writing; false if the stream is closed or was opened with read-only access.</returns>
        </member>
        <member name="P:System.IO.FileStream.Length">
            <summary>Gets the length in bytes of the stream.</summary><returns>A long value representing the length of the stream in bytes.</returns><exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.FileStream.CanSeek" /> for this stream is false. </exception><exception cref="T:System.IO.IOException">An I/O error, such as the file being closed, occurred. </exception>
        </member>
        <member name="P:System.IO.FileStream.Position">
            <summary>Gets or sets the current position of this stream.</summary><returns>The current position of this stream.</returns><exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception><exception cref="T:System.IO.IOException">An I/O error occurred. - or -The position was set to a very large value beyond the end of the stream in Windows 98 or earlier.</exception><exception cref="T:System.ArgumentOutOfRangeException">Attempted to set the position to a negative value. </exception><exception cref="T:System.IO.EndOfStreamException">Attempted seeking past the end of a stream that does not support this. </exception>
        </member>
        <member name="P:System.IO.FileStream.Name">
            <summary>Gets the name of the FileStream that was passed to the constructor.</summary><returns>A string that is the name of the FileStream.</returns>
        </member>
        <member name="M:System.IO.FileStream.Flush">
            <summary>Clears buffers for this stream and causes any buffered data to be written to the file.</summary><exception cref="T:System.IO.IOException">An I/O error occurred. </exception><exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
        </member>
        <member name="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a block of bytes from the stream and writes the data in a given buffer.</summary><returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns><param name="array">When this method returns, contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1<paramref name=")" /> replaced by the bytes read from the current source. </param><param name="offset">The byte offset in <paramref name="array" /> at which the read bytes will be placed. </param><param name="count">The maximum number of bytes to read. </param><exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. </exception><exception cref="T:System.NotSupportedException">The stream does not support reading. </exception><exception cref="T:System.IO.IOException">An I/O error occurred. </exception><exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="array" />. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Sets the current position of this stream to the given value.</summary><returns>The new position in the stream.</returns><param name="offset">The point relative to <paramref name="origin" /> from which to begin seeking. </param><param name="origin">Specifies the beginning, the end, or the current position as a reference point for <paramref name="offset" />, using a value of type <see cref="T:System.IO.SeekOrigin" />. </param><exception cref="T:System.IO.IOException">An I/O error occurred. </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the FileStream is constructed from a pipe or console output. </exception><exception cref="T:System.ArgumentException">Seeking is attempted before the beginning of the stream. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:System.IO.FileStream.SetLength(System.Int64)">
            <summary>Sets the length of this stream to the given value.</summary><param name="value">The new length of the stream. </param><exception cref="T:System.IO.IOException">An I/O error has occurred. </exception><exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking. </exception><exception cref="T:System.ArgumentOutOfRangeException">Attempted to set the <paramref name="value" /> parameter to less than 0. </exception>
        </member>
        <member name="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes a block of bytes to the file stream.</summary><param name="array">The buffer containing data to write to the stream.</param><param name="offset">The zero-based byte offset in <paramref name="array" /> from which to begin copying bytes to the stream. </param><param name="count">The maximum number of bytes to write. </param><exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception><exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="array" />. </exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. </exception><exception cref="T:System.IO.IOException">An I/O error occurred. - or -Another thread may have caused an unexpected change in the position of the operating system's file handle. </exception><exception cref="T:System.ObjectDisposedException">The stream is closed. </exception><exception cref="T:System.NotSupportedException">The current stream instance does not support writing. </exception>
        </member>
        <member name="M:System.IO.FileStream.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.FileStream" /> and optionally releases the managed resources.</summary><param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="T:System.IO.BinaryReaderExtensions">
            <summary>
            Shim complement for the <see cref="T:System.IO.BinaryReader"/> class. <see cref="T:System.IO.BinaryReader"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods.
            </summary>
        </member>
        <member name="M:System.IO.BinaryReaderExtensions.Close(System.IO.BinaryReader)">
            <summary>Closes the current reader and the underlying stream.</summary>
            <param name="reader">Binary reader to be closed.</param>
        </member>
        <member name="T:System.IO.BinaryWriterExtensions">
            <summary>
            Shim complement for the <see cref="T:System.IO.BinaryWriter"/> class. <see cref="T:System.IO.BinaryWriter"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods.
            </summary>
        </member>
        <member name="M:System.IO.BinaryWriterExtensions.Close(System.IO.BinaryWriter)">
            <summary>Closes the current <see cref="T:System.IO.BinaryWriter" /> and the underlying stream.</summary>
            <param name="writer">Binary writer to be closed.</param>
        </member>
        <member name="T:System.IO.Path_">
            <summary>
            Shim complement for the <see cref="T:System.IO.Path"/> class, providing static members that are
            not included in all platform subsets of the <see cref="T:System.IO.Path"/> class.
            </summary>
        </member>
        <member name="F:System.IO.Path_.PathSeparator">
            <summary>A platform-specific separator character used to separate path strings in environment variables.</summary>
        </member>
        <member name="F:System.IO.Path_.DirectorySeparatorChar">
            <summary>Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
        </member>
        <member name="T:System.IO.StreamExtensions">
            <summary>
            Shim complement for the <see cref="T:System.IO.Stream"/> class. <see cref="T:System.IO.Stream"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods.
            </summary>
        </member>
        <member name="M:System.IO.StreamExtensions.Close(System.IO.Stream)">
            <summary>Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed.</summary>
            <param name="stream">Stream to be closed.</param>
        </member>
        <member name="M:System.IO.StreamExtensions.BeginWrite(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Begins an asynchronous write operation. (Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> instead; see the Remarks section.)</summary><returns>An IAsyncResult that represents the asynchronous write, which could still be pending.</returns><param name="buffer">The buffer to write data from. </param><param name="offset">The byte offset in <paramref name="buffer" /> from which to begin writing. </param><param name="count">The maximum number of bytes to write. </param><param name="callback">An optional asynchronous callback, to be called when the write is complete. </param><param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests. </param><exception cref="T:System.IO.IOException">Attempted an asynchronous write past the end of the stream, or a disk error occurs. </exception><exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><exception cref="T:System.NotSupportedException">The current Stream implementation does not support the write operation. </exception>
            <param name="stream">Stream on which to begin writing.</param>
        </member>
        <member name="M:System.IO.StreamExtensions.EndWrite(System.IO.Stream,System.IAsyncResult)">
            <summary>Ends an asynchronous write operation. (Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> instead; see the Remarks section.)</summary><param name="asyncResult">A reference to the outstanding asynchronous I/O request. </param><exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. </exception><exception cref="T:System.ArgumentException">A handle to the pending write operation is not available.-or-The pending operation does not support writing.</exception><exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream.</exception><exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
            <param name="stream">Stream on which to end writing.</param>
        </member>
        <member name="M:System.IO.StreamExtensions.BeginRead(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Begins an asynchronous read operation. (Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> instead; see the Remarks section.)</summary><returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous read, which could still be pending.</returns><param name="buffer">The buffer to read the data into. </param><param name="offset">The byte offset in <paramref name="buffer" /> at which to begin writing data read from the stream. </param><param name="count">The maximum number of bytes to read. </param><param name="callback">An optional asynchronous callback, to be called when the read is complete. </param><param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests. </param><exception cref="T:System.IO.IOException">Attempted an asynchronous read past the end of the stream, or a disk error occurs. </exception><exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><exception cref="T:System.NotSupportedException">The current Stream implementation does not support the read operation. </exception>
            <param name="stream">Stream on which to begin reading.</param>
        </member>
        <member name="M:System.IO.StreamExtensions.EndRead(System.IO.Stream,System.IAsyncResult)">
            <summary>Waits for the pending asynchronous read to complete. (Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> instead; see the Remarks section.)</summary><returns>The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.</returns><param name="asyncResult">The reference to the pending asynchronous request to finish. </param><exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. </exception><exception cref="T:System.ArgumentException">A handle to the pending read operation is not available.-or-The pending operation does not support reading.</exception><exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream.</exception><exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
            <param name="stream">Stream on which to end reading.</param>
        </member>
        <member name="T:System.IO.TextReaderExtensions">
            <summary>
            Shim complement for the <see cref="T:System.IO.TextReader"/> class. <see cref="T:System.IO.TextReader"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods.
            </summary>
        </member>
        <member name="M:System.IO.TextReaderExtensions.Close(System.IO.TextReader)">
            <summary>Closes the <see cref="T:System.IO.TextReader" /> and releases any system resources associated with the TextReader.</summary>
            <param name="reader">Text reader to be closed.</param>
        </member>
        <member name="T:System.IO.TextWriterExtensions">
            <summary>
            Shim complement for the <see cref="T:System.IO.TextWriter"/> class. <see cref="T:System.IO.TextWriter"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods.
            </summary>
        </member>
        <member name="M:System.IO.TextWriterExtensions.Close(System.IO.TextWriter)">
            <summary>Closes the current writer and releases any system resources associated with the writer.</summary>
            <param name="writer">Text writer to be closed.</param>
        </member>
        <member name="T:System.Net.EndPoint">
            <summary>Identifies a network address. This is an abstract class.</summary>
        </member>
        <member name="T:System.Net.Sockets.Socket">
            <summary>Implements the Berkeley sockets interface.</summary>
        </member>
        <member name="P:System.Net.Sockets.Socket.RemoteEndPoint">
            <summary>Gets the remote endpoint.</summary><returns>The <see cref="T:System.Net.EndPoint" /> with which the <see cref="T:System.Net.Sockets.Socket" /> is communicating.</returns><exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket" /> has been closed. </exception>
        </member>
        <member name="T:System.Net.Sockets.SocketError">
            <summary>Defines error codes for the <see cref="T:System.Net.Sockets.Socket" /> class.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.AccessDenied">
            <summary>An attempt was made to access a <see cref="T:System.Net.Sockets.Socket" /> in a way that is forbidden by its access permissions.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.AddressAlreadyInUse">
            <summary>Only one use of an address is normally permitted.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.AddressFamilyNotSupported">
            <summary>The address family specified is not supported. This error is returned if the IPv6 address family was specified and the IPv6 stack is not installed on the local machine. This error is returned if the IPv4 address family was specified and the IPv4 stack is not installed on the local machine.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.AddressNotAvailable">
            <summary>The selected IP address is not valid in this context.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.AlreadyInProgress">
            <summary>The nonblocking <see cref="T:System.Net.Sockets.Socket" /> already has an operation in progress.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.ConnectionAborted">
            <summary>The connection was aborted by the .NET Framework or the underlying socket provider.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.ConnectionRefused">
            <summary>The remote host is actively refusing a connection.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.ConnectionReset">
            <summary>The connection was reset by the remote peer.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.DestinationAddressRequired">
            <summary>A required address was omitted from an operation on a <see cref="T:System.Net.Sockets.Socket" />.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.Disconnecting">
            <summary>A graceful shutdown is in progress.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.Fault">
            <summary>An invalid pointer address was detected by the underlying socket provider.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.HostDown">
            <summary>The operation failed because the remote host is down.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.HostNotFound">
            <summary>No such host is known. The name is not an official host name or alias.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.HostUnreachable">
            <summary>There is no network route to the specified host.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.InProgress">
            <summary>A blocking operation is in progress.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.Interrupted">
            <summary>A blocking <see cref="T:System.Net.Sockets.Socket" /> call was canceled.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.InvalidArgument">
            <summary>An invalid argument was supplied to a <see cref="T:System.Net.Sockets.Socket" /> member.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.IOPending">
            <summary>The application has initiated an overlapped operation that cannot be completed immediately.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.IsConnected">
            <summary>The <see cref="T:System.Net.Sockets.Socket" /> is already connected.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.MessageSize">
            <summary>The datagram is too long.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.NetworkDown">
            <summary>The network is not available.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.NetworkReset">
            <summary>The application tried to set <see cref="F:System.Net.Sockets.SocketOptionName.KeepAlive" /> on a connection that has already timed out.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.NetworkUnreachable">
            <summary>No route to the remote host exists.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.NoBufferSpaceAvailable">
            <summary>No free buffer space is available for a <see cref="T:System.Net.Sockets.Socket" /> operation.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.NoData">
            <summary>The requested name or IP address was not found on the name server.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.NoRecovery">
            <summary>The error is unrecoverable or the requested database cannot be located.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.NotConnected">
            <summary>The application tried to send or receive data, and the <see cref="T:System.Net.Sockets.Socket" /> is not connected.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.NotInitialized">
            <summary>The underlying socket provider has not been initialized.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.NotSocket">
            <summary>A <see cref="T:System.Net.Sockets.Socket" /> operation was attempted on a non-socket.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.OperationAborted">
            <summary>The overlapped operation was aborted due to the closure of the <see cref="T:System.Net.Sockets.Socket" />.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.OperationNotSupported">
            <summary>The address family is not supported by the protocol family.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.ProcessLimit">
            <summary>Too many processes are using the underlying socket provider.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.ProtocolFamilyNotSupported">
            <summary>The protocol family is not implemented or has not been configured.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.ProtocolNotSupported">
            <summary>The protocol is not implemented or has not been configured.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.ProtocolOption">
            <summary>An unknown, invalid, or unsupported option or level was used with a <see cref="T:System.Net.Sockets.Socket" />.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.ProtocolType">
            <summary>The protocol type is incorrect for this <see cref="T:System.Net.Sockets.Socket" />.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.Shutdown">
            <summary>A request to send or receive data was disallowed because the <see cref="T:System.Net.Sockets.Socket" /> has already been closed.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.SocketError">
            <summary>An unspecified <see cref="T:System.Net.Sockets.Socket" /> error has occurred.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.SocketNotSupported">
            <summary>The support for the specified socket type does not exist in this address family.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.Success">
            <summary>The <see cref="T:System.Net.Sockets.Socket" /> operation succeeded.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.SystemNotReady">
            <summary>The network subsystem is unavailable.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.TimedOut">
            <summary>The connection attempt timed out, or the connected host has failed to respond.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.TooManyOpenSockets">
            <summary>There are too many open sockets in the underlying socket provider.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.TryAgain">
            <summary>The name of the host could not be resolved. Try again later.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.TypeNotFound">
            <summary>The specified class was not found.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.VersionNotSupported">
            <summary>The version of the underlying socket provider is out of range.</summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.WouldBlock">
            <summary>An operation on a nonblocking socket cannot be completed immediately.</summary>
        </member>
        <member name="T:System.Net.Sockets.SocketException">
            <!-- No matching elements were found for the following include tag --><include file="../../_Doc/System.xml" path="doc/members/member[@name=&quot;T:System.Net.Sockets.SocketException&quot;]/*" />
        </member>
        <member name="M:System.Net.Sockets.SocketException.#ctor(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Net.Sockets.SocketException.#ctor(System.Int32)&quot;]/*" />
        </member>
        <member name="M:System.Net.Sockets.SocketException.#ctor(System.String,System.Object[])">
            <!-- No matching elements were found for the following include tag --><include file="../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Net.Sockets.SocketException.#ctor(System.String,System.Object[])&quot;]/*" />
        </member>
        <member name="P:System.Net.Sockets.SocketException.ErrorCode">
            <summary>Gets the error code that is associated with this exception.</summary><returns>An integer error code that is associated with this exception.</returns>
        </member>
        <member name="P:System.Net.Sockets.SocketException.SocketErrorCode">
            <!-- No matching elements were found for the following include tag --><include file="../../_Doc/System.xml" path="doc/members/member[@name=&quot;P:System.Net.Sockets.SocketException.SocketErrorCode&quot;]/*" />
        </member>
        <member name="T:System.Net.Sockets.NetworkStream">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;T:System.Net.Sockets.NetworkStream&quot;]/*" />
        </member>
        <member name="M:System.Net.Sockets.NetworkStream.#ctor">
            <summary>
            Default constructor is private to avoid invalid initialization of the <see cref="T:System.Net.Sockets.NetworkStream"/> class.
            </summary>
        </member>
        <member name="M:System.Net.Sockets.NetworkStream.#ctor(Windows.Networking.Sockets.StreamSocket)">
            <summary>
            Initializes a network stream object.
            </summary>
            <param name="socket">Socket corresponding to the network stream.</param>
        </member>
        <member name="M:System.Net.Sockets.NetworkStream.UpgradeToSsl(System.String)">
            <summary>
            Attempt to upgrade stream to SSL.
            </summary>
            <param name="validationHost">Host subject to SSL upgrade.</param>
        </member>
        <member name="M:System.Net.Sockets.NetworkStream.Flush">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Net.Sockets.NetworkStream.Flush&quot;]/*" />
        </member>
        <member name="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)&quot;]/*" />
        </member>
        <member name="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)&quot;]/*" />
        </member>
        <member name="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)&quot;]/*" />
        </member>
        <member name="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)&quot;]/*" />
        </member>
        <member name="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;P:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)&quot;]/*" />
        </member>
        <member name="P:System.Net.Sockets.NetworkStream.CanRead">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;P:System.Net.Sockets.NetworkStream.CanRead&quot;]/*" />
        </member>
        <member name="P:System.Net.Sockets.NetworkStream.CanSeek">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;P:System.Net.Sockets.NetworkStream.CanSeek&quot;]/*" />
        </member>
        <member name="P:System.Net.Sockets.NetworkStream.CanWrite">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;P:System.Net.Sockets.NetworkStream.CanWrite&quot;]/*" />
        </member>
        <member name="P:System.Net.Sockets.NetworkStream.Length">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;P:System.Net.Sockets.NetworkStream.Length&quot;]/*" />
        </member>
        <member name="P:System.Net.Sockets.NetworkStream.Position">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;P:System.Net.Sockets.NetworkStream.Position&quot;]/*" />
        </member>
        <member name="T:System.Net.Sockets.TcpClient">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;T:System.Net.Sockets.TcpClient&quot;]/*" />
        </member>
        <member name="M:System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)&quot;]/*" />
        </member>
        <member name="M:System.Net.Sockets.TcpClient.#ctor(Windows.Networking.Sockets.StreamSocket)">
            <summary>
            Initializes a TCP client for an existing <paramref name="socket"/>.
            </summary>
            <param name="socket">Socket on which the TCP client should be based.</param>
        </member>
        <member name="P:System.Net.Sockets.TcpClient.NoDelay">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;P:System.Net.Sockets.TcpClient.NoDelay&quot;]/*" />
        </member>
        <member name="P:System.Net.Sockets.TcpClient.Client">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;P:System.Net.Sockets.TcpClient.Client&quot;]/*" />
        </member>
        <member name="M:System.Net.Sockets.TcpClient.GetStream">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Net.Sockets.TcpClient.GetStream&quot;]/*" />
        </member>
        <member name="M:System.Net.Sockets.TcpClient.Close">
            <summary>Disposes this <see cref="T:System.Net.Sockets.TcpClient" /> instance and requests that the underlying TCP connection be closed.</summary>
        </member>
        <member name="T:System.Net.Sockets.TcpListener">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;T:System.Net.Sockets.TcpListener&quot;]/*" />
        </member>
        <member name="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)&quot;]/*" />
        </member>
        <member name="M:System.Net.Sockets.TcpListener.Start">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Net.Sockets.TcpListener.Start&quot;]/*" />
        </member>
        <member name="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)&quot;]/*" />
        </member>
        <member name="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)&quot;]/*" />
        </member>
        <member name="M:System.Net.Sockets.TcpListener.Stop">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Net.Sockets.TcpListener.Stop&quot;]/*" />
        </member>
        <member name="M:System.Net.Sockets.TcpListener.OnConnectionReceived(Windows.Networking.Sockets.StreamSocketListener,Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs)">
            <summary>
            Event handler when connection is established.
            </summary>
            <param name="sender">Listener object.</param>
            <param name="args">Connection received event arguments.</param>
        </member>
        <member name="T:System.Net.IPAddress">
            <summary>Provides an Internet Protocol (IP) address.</summary>
        </member>
        <member name="F:System.Net.IPAddress.Any">
            <summary>Provides an IP address that indicates that the server must listen for client activity on all network interfaces. This field is read-only.</summary>
        </member>
        <member name="M:System.Net.IPAddress.#ctor(System.Int64)">
            <summary>Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class with the address specified as an <see cref="T:System.Int64" />.</summary><param name="newAddress">The long value of the IP address. For example, the value 0x2414188f in big-endian format would be the IP address "143.24.20.36". </param><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newAddress" /> &lt; 0 or <paramref name="newAddress" /> &gt; 0x00000000FFFFFFFF </exception>
        </member>
        <member name="T:System.Net.Security.SslPolicyErrors">
            <summary>Enumerates Secure Socket Layer (SSL) policy errors.</summary>
        </member>
        <member name="F:System.Net.Security.SslPolicyErrors.None">
            <summary>No SSL policy errors.</summary>
        </member>
        <member name="T:System.Net.Security.RemoteCertificateValidationCallback">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;T:System.Net.Security.RemoteCertificateValidationCallback&quot;]/*" />
        </member>
        <member name="T:System.Net.Security.SslStream">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;T:System.Net.Security.SslStream&quot;]/*" />
        </member>
        <member name="M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)&quot;]/*" />
        </member>
        <member name="M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)&quot;]/*" />
        </member>
        <member name="M:System.Net.Security.SslStream.#ctor(System.IO.Stream)">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Net.Security.SslStream.#ctor(System.IO.Stream)&quot;]/*" />
        </member>
        <member name="M:System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)&quot;]/*" />
        </member>
        <member name="M:System.Net.Security.SslStream.AuthenticateAsClient(System.String)">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Net.Security.SslStream.AuthenticateAsClient(System.String)&quot;]/*" />
        </member>
        <member name="T:System.Net.HttpWebRequestExtensions">
            <summary>
            Shim complement for the <see cref="T:System.Net.HttpWebRequest"/> class. <see cref="T:System.Net.HttpWebRequest"/> instance properties that are not available in the 
            PCL profile are here provided as equivalent extension methods (since extension properties is not available in C#).
            </summary>
        </member>
        <member name="M:System.Net.HttpWebRequestExtensions.UserAgent(System.Net.HttpWebRequest,System.String)">
            <summary>Gets or sets the value of the User-agent HTTP header.</summary><returns>The value of the User-agent HTTP header. The default value is null.NoteThe value for this property is stored in <see cref="T:System.Net.WebHeaderCollection" />. If WebHeaderCollection is set, the property value is lost.</returns>
            <param name="request">HTTP web request object on which to set user agent.</param>
            <param name="userAgent">User agent value to set.</param>
        </member>
        <member name="T:System.Net.WebRequestExtensions">
            <summary>
            Shim complement for the <see cref="T:System.Net.WebRequest"/> class. <see cref="T:System.Net.WebRequest"/> instance properties and methods that are not available in the 
            PCL profile are here provided as equivalent extension methods (since extension properties is not available in C#).
            </summary>
        </member>
        <member name="M:System.Net.WebRequestExtensions.GetResponse(System.Net.WebRequest)">
            <summary>When overridden in a descendant class, returns a response to an Internet request.</summary><returns>A <see cref="T:System.Net.WebResponse" /> containing the response to the Internet request.</returns><exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
            <param name="request">HTTP web request object on which to get response.</param>
        </member>
        <member name="M:System.Net.WebRequestExtensions.GetRequestStream(System.Net.WebRequest)">
            <summary>When overridden in a descendant class, returns a <see cref="T:System.IO.Stream" /> for writing data to the Internet resource.</summary><returns>A <see cref="T:System.IO.Stream" /> for writing data to the Internet resource.</returns><exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
            <param name="request">HTTP web request object on which to get request stream.</param>
        </member>
        <member name="M:System.Net.WebRequestExtensions.ConnectionGroupName(System.Net.WebRequest,System.String)">
            <summary>When overridden in a descendant class, gets or sets the name of the connection group for the request.</summary><returns>The name of the connection group for the request.</returns><exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
            <param name="request">HTTP web request object on which to set connection group name.</param>
            <param name="groupName">Connection group name value to set.</param>
        </member>
        <member name="M:System.Net.WebRequestExtensions.Proxy(System.Net.WebRequest,System.Net.IWebProxy)">
            <summary>When overridden in a descendant class, gets or sets the network proxy to use to access this Internet resource.</summary><returns>The <see cref="T:System.Net.IWebProxy" /> to use to access the Internet resource.</returns><exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
            <param name="request">HTTP web request object on which to set proxy.</param>
            <param name="proxy">Web proxy value to set.</param>
        </member>
        <member name="M:System.Net.WebRequestExtensions.Timeout(System.Net.WebRequest,System.Int32)">
            <summary>Gets or sets the length of time, in milliseconds, before the request times out.</summary><returns>The length of time, in milliseconds, until the request times out, or the value <see cref="F:System.Threading.Timeout.Infinite" /> to indicate that the request does not time out. The default value is defined by the descendant class.</returns><exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
            <param name="request">HTTP web request object on which to set timeout.</param>
            <param name="timeout">Timeout value to set.</param>
        </member>
        <member name="M:System.Net.WebRequestExtensions.ContentLength(System.Net.WebRequest,System.Int64)">
            <summary>When overridden in a descendant class, gets or sets the content length of the request data being sent.</summary><returns>The number of bytes of request data being sent.</returns><exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
            <param name="request">HTTP web request object on which to set content length.</param>
            <param name="contentLength">Content length value to set.</param>
        </member>
        <member name="T:System.Net.WebResponseExtensions">
            <summary>
            Shim complement for the <see cref="T:System.Net.WebResponse"/> class. <see cref="T:System.Net.WebResponse"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods.
            </summary>
        </member>
        <member name="M:System.Net.WebResponseExtensions.Close(System.Net.WebResponse)">
            <summary>When overridden by a descendant class, closes the response stream.</summary><exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
            <param name="webResponse">HTTP web response object to close.</param>
        </member>
        <member name="T:System.NonSerializedAttribute">
            <summary>Indicates that a field of a serializable class should not be serialized. This class cannot be inherited.</summary>
        </member>
        <member name="T:System.NotFiniteNumberException">
            <summary>The exception that is thrown when a floating-point value is positive infinity, negative infinity, or Not-a-Number (NaN).</summary>
        </member>
        <member name="M:System.NotFiniteNumberException.#ctor(System.String,System.Double)">
            <summary>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class with a specified error message and the invalid number.</summary><param name="message">The message that describes the error. </param><param name="offendingNumber">The value of the argument that caused the exception. </param>
        </member>
        <member name="T:System.Reflection.Binder">
            <summary>Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type. </summary>
        </member>
        <member name="T:System.Reflection.BindingFlags">
            <summary>Specifies flags that control binding and the way in which the search for members and types is conducted by reflection.</summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.Default">
            <summary>Specifies no binding flag.</summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.IgnoreCase">
            <summary>Specifies that the case of the member name should not be considered when binding.</summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.DeclaredOnly">
            <summary>Specifies that only members declared at the level of the supplied type's hierarchy should be considered. Inherited members are not considered.</summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.Instance">
            <summary>Specifies that instance members are to be included in the search.</summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.Static">
            <summary>Specifies that static members are to be included in the search.</summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.Public">
            <summary>Specifies that public members are to be included in the search.</summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.NonPublic">
            <summary>Specifies that non-public members are to be included in the search.</summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.FlattenHierarchy">
            <summary>Specifies that public and protected static members up the hierarchy should be returned. Private static members in inherited classes are not returned. Static members include fields, methods, events, and properties. Nested types are not returned.</summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.InvokeMethod">
            <summary>Specifies that a method is to be invoked. This must not be a constructor or a type initializer.</summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.CreateInstance">
            <summary>Specifies that Reflection should create an instance of the specified type. Calls the constructor that matches the given arguments. The supplied member name is ignored. If the type of lookup is not specified, (Instance | Public) will apply. It is not possible to call a type initializer.</summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.GetField">
            <summary>Specifies that the value of the specified field should be returned.</summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.SetField">
            <summary>Specifies that the value of the specified field should be set.</summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.GetProperty">
            <summary>Specifies that the value of the specified property should be returned.</summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.SetProperty">
            <summary>Specifies that the value of the specified property should be set. For COM properties, specifying this binding flag is equivalent to specifying PutDispProperty and PutRefDispProperty.</summary>
        </member>
        <member name="T:System.Reflection.TargetException">
            <summary>Represents the exception that is thrown when an attempt is made to invoke an invalid target.</summary>
        </member>
        <member name="M:System.Reflection.TargetException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetException" /> class with an empty message and the root cause of the exception.</summary>
        </member>
        <member name="M:System.Reflection.TargetException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetException" /> class with the given message and the root cause exception.</summary><param name="message">A String describing the reason why the exception occurred. </param>
        </member>
        <member name="T:System.Reflection.AssemblyExtensions">
            <summary>
            Shim complement for the <see cref="T:System.Reflection.Assembly"/> class. <see cref="T:System.Reflection.Assembly"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.CreateInstance(System.Reflection.Assembly,System.String)">
            <summary>Locates the specified type from this assembly and creates an instance of it using the system activator, using case-sensitive search.</summary><returns>An instance of the specified type created with the default constructor; or null if <paramref name="typeName" /> is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with <see cref="T:System.Reflection.BindingFlags" /> set to Public or Instance. </returns><param name="typeName">The <see cref="P:System.Type.FullName" /> of the type to locate. </param><exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> is an empty string ("") or a string beginning with a null character.-or-The current assembly was loaded into the reflection-only context.</exception><exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception><exception cref="T:System.MissingMethodException">No matching constructor was found. </exception><exception cref="T:System.IO.FileNotFoundException">
        <paramref name="typeName" /> requires a dependent assembly that could not be found. </exception><exception cref="T:System.IO.FileLoadException">
        <paramref name="typeName" /> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="typeName" /> requires a dependent assembly that was not preloaded. </exception><exception cref="T:System.BadImageFormatException">
        <paramref name="typeName" /> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="typeName" /> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.</exception>
            <param name="assembly">Assembly on which the <paramref name="typeName" /> instance should be created.</param>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)">
            <summary>Gets the types defined in this assembly.</summary><returns>An array that contains all the types that are defined in this assembly.</returns><exception cref="T:System.Reflection.ReflectionTypeLoadException">The assembly contains one or more types that cannot be loaded. The array returned by the <see cref="P:System.Reflection.ReflectionTypeLoadException.Types" /> property of this exception contains a <see cref="T:System.Type" /> object for each type that was loaded and null for each type that could not be loaded, while the <see cref="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions" /> property contains an exception for each type that could not be loaded.</exception>
            <param name="assembly">Assembly for which the array of types should be listed.</param>
        </member>
        <member name="T:System.Reflection.Assembly_">
            <summary>
            Shim complement for the <see cref="T:System.Reflection.Assembly"/> class, providing static members that are
            not included in the PCL member subset of the <see cref="T:System.Reflection.Assembly"/> class.
            </summary>
        </member>
        <member name="M:System.Reflection.Assembly_.GetExecutingAssembly">
            <summary>Gets the assembly that contains the code that is currently executing.</summary><returns>The assembly that contains the code that is currently executing. </returns>
        </member>
        <member name="M:System.Reflection.Assembly_.Load(System.String)">
            <summary>Loads an assembly given the long form of its name.</summary><returns>The loaded assembly.</returns><param name="assemblyString">The long form of the assembly name. </param><exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> is null. </exception><exception cref="T:System.ArgumentException">
        <paramref name="assemblyString" /> is a zero-length string. </exception><exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyString" /> is not found. </exception><exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception><exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString" /> was compiled with a later version.</exception>
        </member>
        <member name="T:System.ResolveEventArgs">
            <summary>Provides data for loader resolution events, such as the <see cref="E:System.AppDomain.TypeResolve" />, <see cref="E:System.AppDomain.ResourceResolve" />, <see cref="E:System.AppDomain.ReflectionOnlyAssemblyResolve" />, and <see cref="E:System.AppDomain.AssemblyResolve" /> events.</summary>
        </member>
        <member name="M:System.ResolveEventArgs.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.ResolveEventArgs" /> class, specifying the name of the item to resolve.</summary><param name="name">The name of an item to resolve. </param>
        </member>
        <member name="P:System.ResolveEventArgs.Name">
            <summary>Gets the name of the item to resolve.</summary><returns>The name of the item to resolve.</returns>
        </member>
        <member name="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter">
            <summary>Serializes and deserializes an object, or an entire graph of connected objects, in binary format.</summary>
        </member>
        <member name="P:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Binder">
            <summary>Gets or sets an object of type <see cref="T:System.Runtime.Serialization.SerializationBinder" /> that controls the binding of a serialized object to a type.</summary><returns>The serialization binder to use with this formatter.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(System.IO.Stream)">
            <summary>Deserializes the specified stream into an object graph.</summary><returns>The top (root) of the object graph.</returns><param name="serializationStream">The stream from which to deserialize the object graph. </param><exception cref="T:System.ArgumentNullException">The <paramref name="serializationStream" /> is null. </exception><exception cref="T:System.Runtime.Serialization.SerializationException">The <paramref name="serializationStream" /> supports seeking, but its length is 0. -or-The target type is a <see cref="T:System.Decimal" />, but the value is out of range of the <see cref="T:System.Decimal" /> type.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>Serializes the object, or graph of objects with the specified top (root), to the given stream.</summary><param name="serializationStream">The stream to which the graph is to be serialized. </param><param name="graph">The object at the root of the graph to serialize. </param><exception cref="T:System.ArgumentNullException">The <paramref name="serializationStream" /> is null. -or-The <paramref name="graph" /> is null.</exception><exception cref="T:System.Runtime.Serialization.SerializationException">An error has occurred during serialization, such as if an object in the <paramref name="graph" /> parameter is not marked as serializable. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:System.Runtime.Serialization.ISerializable">
            <summary>Allows an object to control its own serialization and deserialization.</summary>
        </member>
        <member name="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param><param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:System.Runtime.Serialization.OptionalFieldAttribute">
            <summary>Specifies that a field can be missing from a serialization stream so that the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> and the <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter" /> does not throw an exception. </summary>
        </member>
        <member name="T:System.Runtime.Serialization.SerializationBinder">
            <summary>Allows users to control class loading and mandate what class to load.</summary>
        </member>
        <member name="M:System.Runtime.Serialization.SerializationBinder.BindToType(System.String,System.String)">
            <summary>When overridden in a derived class, controls the binding of a serialized object to a type.</summary><returns>The type of the object the formatter creates a new instance of.</returns><param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object. </param><param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object. </param>
        </member>
        <member name="T:System.Runtime.Serialization.SerializationInfo">
            <summary>Stores all the data needed to serialize or deserialize an object. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Double)">
            <summary>Adds a double-precision floating-point value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary><param name="name">The name to associate with the value, so it can be deserialized later. </param><param name="value">The double value to serialize. </param><exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception><exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name" />. </exception>
        </member>
        <member name="M:System.Runtime.Serialization.SerializationInfo.GetValue(System.String,System.Type)">
            <summary>Retrieves a value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary><returns>The object of the specified <see cref="T:System.Type" /> associated with <paramref name="name" />.</returns><param name="name">The name associated with the value to retrieve.</param><param name="type">The <see cref="T:System.Type" /> of the value to retrieve. If the stored value cannot be converted to this type, the system will throw a <see cref="T:System.InvalidCastException" />. </param><exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="type" /> is null. </exception><exception cref="T:System.InvalidCastException">The value associated with <paramref name="name" /> cannot be converted to <paramref name="type" />. </exception><exception cref="T:System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance. </exception>
        </member>
        <member name="T:System.Security.Authentication.SslProtocols">
            <summary>Defines the possible versions of <see cref="T:System.Security.Authentication.SslProtocols" />.</summary>
        </member>
        <member name="F:System.Security.Authentication.SslProtocols.Tls">
            <summary>Specifies the TLS 1.0 security protocol. The TLS protocol is defined in IETF RFC 2246.</summary>
        </member>
        <member name="T:System.Security.Cryptography.RNGCryptoServiceProvider">
            <summary>Implements a cryptographic Random Number Generator (RNG) using the implementation provided by the cryptographic service provider (CSP). This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(System.Byte[])">
            <summary>Fills an array of bytes with a cryptographically strong sequence of random values.</summary><param name="data">The array to fill with a cryptographically strong sequence of random values. </param><exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.</exception>
        </member>
        <member name="T:System.Security.Cryptography.X509Certificates.OpenFlags">
            <summary>Specifies the way to open the X.509 certificate store.</summary>
        </member>
        <member name="F:System.Security.Cryptography.X509Certificates.OpenFlags.ReadOnly">
            <summary>Open the X.509 certificate store for reading only.</summary>
        </member>
        <member name="T:System.Security.Cryptography.X509Certificates.StoreLocation">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;T:System.Security.Cryptography.X509Certificates.StoreLocation&quot;]/*" />
        </member>
        <member name="F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine&quot;]/*" />
        </member>
        <member name="T:System.Security.Cryptography.X509Certificates.StoreName">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;T:System.Security.Cryptography.X509Certificates.StoreName&quot;]/*" />
        </member>
        <member name="F:System.Security.Cryptography.X509Certificates.StoreName.My">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;F:System.Security.Cryptography.X509Certificates.StoreName.My&quot;]/*" />
        </member>
        <member name="T:System.Security.Cryptography.X509Certificates.X509Certificate">
            <summary>Provides methods that help you use X.509 v.3 certificates.</summary>
        </member>
        <member name="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection">
            <summary>Represents a collection of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> objects. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)">
            <summary>Searches an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> object using the search criteria specified by the <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType" /> enumeration and the <paramref name="findValue" /> object.</summary><returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> object.</returns><param name="findType">One of the <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType" />  values. </param><param name="findValue">The search criteria as an object. </param><param name="validOnly">true to allow only valid certificates to be returned from the search; otherwise, false. </param><exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="findType" /> is invalid. </exception>
        </member>
        <member name="T:System.Security.Cryptography.X509Certificates.X509Chain">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;T:System.Security.Cryptography.X509Certificates.X509Chain&quot;]/*" />
        </member>
        <member name="T:System.Security.Cryptography.X509Certificates.X509FindType">
            <summary>Specifies the type of value the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> method searches for.</summary>
        </member>
        <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName">
            <summary>The <paramref name="findValue" /> parameter for the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> method must be a string representing the subject name of the certificate. This is a less specific search than that provided by the <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName" /> enumeration value. Using the <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName" /> value, the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> method performs a case-insensitive string comparison using the supplied value. For example, if you pass "MyCert" to the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> method, it will find all certificates with the subject name containing that string, regardless of other subject values. Searching by distinguished name is a more precise search.</summary>
        </member>
        <member name="T:System.Security.Cryptography.X509Certificates.X509Store">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;T:System.Security.Cryptography.X509Certificates.X509Store&quot;]/*" />
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)&quot;]/*" />
        </member>
        <member name="P:System.Security.Cryptography.X509Certificates.X509Store.Certificates">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;P:System.Security.Cryptography.X509Certificates.X509Store.Certificates&quot;]/*" />
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Store.Open(System.Security.Cryptography.X509Certificates.OpenFlags)">
            <!-- No matching elements were found for the following include tag --><include file="../../../_Doc/System.xml" path="doc/members/member[@name=&quot;M:System.Security.Cryptography.X509Certificates.X509Store.Open(System.Security.Cryptography.X509Certificates.OpenFlags)&quot;]/*" />
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Store.Close">
            <summary>Closes an X.509 certificate store.</summary>
        </member>
        <member name="T:System.SerializableAttribute">
            <summary>Indicates that a class can be serialized. This class cannot be inherited.</summary>
        </member>
        <member name="T:System.Threading.ThreadStart">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;T:System.Threading.ThreadStart&quot;]/*" />
        </member>
        <member name="T:System.Threading.ParameterizedThreadStart">
            <summary>Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</summary><param name="obj">An object that contains data for the thread procedure.</param>
        </member>
        <member name="T:System.Threading.Thread">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;T:System.Threading.Thread&quot;]/*" />
        </member>
        <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)&quot;]/*" />
        </member>
        <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)&quot;]/*" />
        </member>
        <member name="P:System.Threading.Thread.CurrentThread">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;P:System.Threading.Thread.CurrentThread&quot;]/*" />
        </member>
        <member name="P:System.Threading.Thread.Name">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;P:System.Threading.Thread.Name&quot;]/*" />
        </member>
        <member name="P:System.Threading.Thread.IsBackground">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;P:System.Threading.Thread.IsBackground&quot;]/*" />
        </member>
        <member name="M:System.Threading.Thread.Start">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;M:System.Threading.Thread.Start&quot;]/*" />
        </member>
        <member name="M:System.Threading.Thread.Start(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;M:System.Threading.Thread.Start(System.Object)&quot;]/*" />
        </member>
        <member name="M:System.Threading.Thread.Join">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;M:System.Threading.Thread.Join&quot;]/*" />
        </member>
        <member name="M:System.Threading.Thread.Join(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;M:System.Threading.Thread.Join(System.Int32)&quot;]/*" />
        </member>
        <member name="M:System.Threading.Thread.Abort">
            <summary>Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread. Calling this method usually terminates the thread.</summary><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><exception cref="T:System.Threading.ThreadStateException">The thread that is being aborted is currently suspended.</exception>
        </member>
        <member name="M:System.Threading.Thread.Sleep(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="../_Doc/mscorlib.xml" path="doc/members/member[@name=&quot;M:System.Threading.Thread.Sleep(System.Int32)&quot;]/*" />
        </member>
        <member name="T:System.Threading.ThreadAbortException">
            <summary>The exception that is thrown when a call is made to the <see cref="M:System.Threading.Thread.Abort(System.Object)" /> method. This class cannot be inherited.</summary>
        </member>
        <member name="T:System.Threading.WaitCallback">
            <summary>Represents a callback method to be executed by a thread pool thread.</summary><param name="state">An object containing information to be used by the callback method. </param>
        </member>
        <member name="T:System.Threading.ThreadPool">
            <summary>Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</summary>
        </member>
        <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>Queues a method for execution. The method executes when a thread pool thread becomes available.</summary><returns>true if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</returns><param name="callBack">A <see cref="T:System.Threading.WaitCallback" /> that represents the method to be executed. </param><exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> is null.</exception><exception cref="T:System.NotSupportedException">The common language runtime (CLR) is hosted, and the host does not support this action.</exception>
        </member>
        <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>Queues a method for execution, and specifies an object containing data to be used by the method. The method executes when a thread pool thread becomes available.</summary><returns>true if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</returns><param name="callBack">A <see cref="T:System.Threading.WaitCallback" /> representing the method to execute. </param><param name="state">An object containing data to be used by the method. </param><exception cref="T:System.NotSupportedException">The common language runtime (CLR) is hosted, and the host does not support this action.</exception><exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> is null.</exception>
        </member>
        <member name="T:System.Threading.WaitHandleExtensions">
            <summary>
            Shim complement for the <see cref="T:System.Threading.WaitHandle"/> class. <see cref="T:System.Threading.WaitHandle"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods.
            </summary>
        </member>
        <member name="M:System.Threading.WaitHandleExtensions.Close(System.Threading.WaitHandle)">
            <summary>Releases all resources held by the current <see cref="T:System.Threading.WaitHandle" />.</summary>
            <param name="waitHandle">Wait handle to be closed.</param>
        </member>
        <member name="T:System.Timers.ElapsedEventArgs">
            <summary>Provides data for the <see cref="E:System.Timers.Timer.Elapsed" /> event.</summary>
        </member>
        <member name="T:System.Array_">
            <summary>
            Shim complement for the <see cref="T:System.Array"/> class, providing static members that are
            not included in the PCL member subset of the <see cref="T:System.Array"/> class.
            </summary>
        </member>
        <member name="M:System.Array_.Sort``2(``0[],``1[])">
            <summary>Sorts a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each key.</summary><param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort. </param><param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or null to sort only <paramref name="keys" />.</param><typeparam name="TKey">The type of the elements of the key array.</typeparam><typeparam name="TValue">The type of the elements of the items array.</typeparam><exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.</exception><exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.-or-<paramref name="items" /> is not null, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</exception><exception cref="T:System.InvalidOperationException">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
        </member>
        <member name="M:System.Array_.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})">
            <summary>Sorts a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary><param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort. </param><param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or null to sort only <paramref name="keys" />.</param><param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param><typeparam name="TKey">The type of the elements of the key array.</typeparam><typeparam name="TValue">The type of the elements of the items array.</typeparam><exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.</exception><exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.-or-<paramref name="items" /> is not null, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.-or-The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception><exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
        </member>
        <member name="M:System.Array_.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>Sorts a range of elements in a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary><param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort. </param><param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or null to sort only <paramref name="keys" />.</param><param name="index">The starting index of the range to sort.</param><param name="length">The number of elements in the range to sort.</param><param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param><typeparam name="TKey">The type of the elements of the key array.</typeparam><typeparam name="TValue">The type of the elements of the items array.</typeparam><exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="keys" />.-or-<paramref name="length" /> is less than zero.</exception><exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.-or-<paramref name="items" /> is not null, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.-or-<paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.-or-<paramref name="items" /> is not null, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />. -or-The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception><exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
        </member>
        <member name="M:System.Array_.ConvertAll``2(``0[],System.Converter{``0,``1})">
            <summary>Converts an array of one type to an array of another type.</summary><returns>An array of the target type containing the converted elements from the source array.</returns><param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to convert to a target type.</param><param name="converter">A <see cref="T:System.Converter`2" /> that converts each element from one type to another type.</param><typeparam name="TInput">The type of the elements of the source array.</typeparam><typeparam name="TOutput">The type of the elements of the target array.</typeparam><exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.-or-<paramref name="converter" /> is null.</exception>
        </member>
        <member name="T:System.Attribute_">
            <summary>
            Shim complement for the <see cref="T:System.Attribute"/> class, providing members that are
            not included in the PCL member subset of the <see cref="T:System.Attribute"/> class.
            </summary>
        </member>
        <member name="M:System.Attribute_.GetCustomAttribute(System.Type,System.Type)">
            <summary>Retrieves a custom attribute applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</summary><returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.</returns><param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class. </param><param name="attributeType">The type, or a base type, of the custom attribute to search for.</param><exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception><exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. </exception><exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found. </exception><exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
            <remarks>On Universal Windows Platform and Portable Class Libraries, <see cref="T:System.Type" /> is not a sub-class of <see cref="T:System.Reflection.MemberInfo" />, therefore the
            signature of this Shim method has been modified to use <see cref="T:System.Type" /> for <paramref name="element" /> instead.</remarks>
        </member>
        <member name="T:System.ICloneableExtensions">
            <summary>
            Shim complement for the <see cref="T:System.ICloneable"/> interface. Runtime support for performing <see cref="M:System.ICloneable.Clone"/> when <see cref="T:System.ICloneable"/>
            is not explcitly implemented.
            </summary>
        </member>
        <member name="M:System.ICloneableExtensions.Clone``1(``0)">
            <summary>Creates a new object that is a copy of the current instance.</summary><returns>A new object that is a copy of this instance.</returns>
            <param name="thisObject">Object to clone.</param>
        </member>
        <member name="T:System.Type_">
            <summary>
            Shim complement for the <see cref="T:System.Type"/> class, providing static members that are
            not included in the PCL member subset of the <see cref="T:System.Type"/> class.
            </summary>
        </member>
        <member name="F:System.Type_.EmptyTypes">
            <summary>Represents an empty array of type <see cref="T:System.Type" />. This field is read-only.</summary>
        </member>
        <member name="T:System.Xml.Linq.XDocumentExtensions">
            <summary>
            Shim complement for the <see cref="T:System.Xml.Linq.XDocument"/> class. <see cref="T:System.Xml.Linq.XDocument"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XDocumentExtensions.Save(System.Xml.Linq.XDocument,System.String)">
            <summary>Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a file, overwriting an existing file, if it exists.</summary><param name="fileName">A string that contains the name of the file.</param>
            <param name="self">Document object itself.</param>
        </member>
        <member name="T:System.Environment_">
            <summary>
            Shim complement for the <see cref="T:System.Environment"/> class, providing members that are
            not included in the PCL member subset of the <see cref="T:System.Environment"/> class.
            </summary>
        </member>
        <member name="P:System.Environment_.MachineName">
            <summary>Gets the NetBIOS name of this local computer.</summary><returns>A string containing the name of this computer.</returns><exception cref="T:System.InvalidOperationException">The name of this computer cannot be obtained.</exception>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            Shim complement for the <see cref="T:System.String"/> class. <see cref="T:System.String"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods.
            </summary>
        </member>
        <member name="M:System.StringExtensions.Clone(System.String)">
            <summary>Returns a reference to this instance of <see cref="T:System.String" />.</summary><returns>This instance of <see cref="T:System.String" />.</returns>
            <param name="thisString"><see cref="T:System.String" /> object.</param>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            Shim complement for the <see cref="T:System.Type"/> class. <see cref="T:System.Type"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods. <see cref="T:System.Type"/> instance properties that are not available
            in the PCL profile are here provided as extension methods without additional arguments (since extension properties are not supported in C#).
            </summary>
        </member>
        <member name="M:System.TypeExtensions.IsEnum(System.Type)">
            <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> represents an enumeration.</summary><returns>true if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, false.</returns>
        </member>
        <member name="M:System.TypeExtensions.IsValueType(System.Type)">
            <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a value type.</summary><returns>true if the <see cref="T:System.Type" /> is a value type; otherwise, false.</returns>
        </member>
        <member name="M:System.TypeExtensions.IsAssignableFrom(System.Type,System.Type)">
            <summary>Determines whether an instance of a specified type can be assigned to the current type instance. </summary><returns>true if any of the following conditions is true:  <paramref name="c" /> and the current instance represent the same type. <paramref name="c" /> is derived either directly or indirectly from the current instance. The current instance is an interface that <paramref name="c" /> implements. <paramref name="c" /> is a generic type parameter, and the current instance represents one of the constraints of <paramref name="c" />. <paramref name="c" /> represents a value type, and the current instance represents Nullable&lt;c&gt; (Nullable(Of c) in Visual Basic).false if none of these conditions are true, or if <paramref name="c" /> is null. </returns><param name="c">The type to compare with the current type. </param>
            <param name="type"><see cref="T:System.Type" /> object.</param>
        </member>
        <member name="M:System.TypeExtensions.IsSubclassOf(System.Type,System.Type)">
            <summary>Determines whether the current <see cref="T:System.Type" /> derives from the specified <see cref="T:System.Type" />.</summary><returns>true if the current Type derives from <paramref name="c" />; otherwise, false. This method also returns false if <paramref name="c" /> and the current Type are equal.</returns><param name="c">The type to compare with the current type. </param><exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> is null. </exception>
            <param name="type"><see cref="T:System.Type" /> object.</param>
        </member>
        <member name="M:System.TypeExtensions.IsInstanceOfType(System.Type,System.Object)">
            <summary>Determines whether the specified object is an instance of the current <see cref="T:System.Type" />.</summary><returns>true if the current Type is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current Type is an interface that <paramref name="o" /> implements. false if neither of these conditions is the case, if <paramref name="o" /> is null, or if the current Type is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns true).</returns><param name="o">The object to compare with the current type. </param>
            <param name="type"><see cref="T:System.Type" /> object.</param>
        </member>
        <member name="M:System.TypeExtensions.GetConstructor(System.Type,System.Type[])">
            <summary>Searches for a public instance constructor whose parameters match the types in the specified array.</summary><returns>An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, null.</returns><param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.-or- An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters. Such an empty array is provided by the static field <see cref="F:System.Type.EmptyTypes" />. </param><exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception><exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional. </exception>
            <param name="type"><see cref="T:System.Type" /> object.</param>
        </member>
        <member name="M:System.TypeExtensions.GetField(System.Type,System.String)">
            <summary>Searches for the public field with the specified name.</summary><returns>An object representing the public field with the specified name, if found; otherwise, null.</returns><param name="name">The string containing the name of the data field to get. </param><exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception><exception cref="T:System.NotSupportedException">This <see cref="T:System.Type" /> object is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has not yet been called. </exception>
            <param name="type"><see cref="T:System.Type" /> object.</param>
        </member>
        <member name="M:System.TypeExtensions.GetField(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>Searches for the specified field, using the specified binding constraints.</summary><returns>An object representing the field that matches the specified requirements, if found; otherwise, null.</returns><param name="name">The string containing the name of the data field to get. </param><param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param><exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
            <param name="type"><see cref="T:System.Type" /> object.</param>
        </member>
        <member name="M:System.TypeExtensions.GetProperty(System.Type,System.String)">
            <summary>Searches for the public field with the specified name.</summary><returns>An object representing the public field with the specified name, if found; otherwise, null.</returns><param name="name">The string containing the name of the data field to get. </param><exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception><exception cref="T:System.NotSupportedException">This <see cref="T:System.Type" /> object is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has not yet been called. </exception>
            <param name="type"><see cref="T:System.Type" /> object.</param>
        </member>
        <member name="M:System.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])">
            <summary>Searches for the specified public method whose parameters match the specified argument types.</summary><returns>An object representing the public method whose parameters match the specified argument types, if found; otherwise, null.</returns><param name="name">The string containing the name of the public method to get. </param><param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters. </param><exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and specified parameters. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or- <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception><exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional. </exception>
            <param name="type"><see cref="T:System.Type" /> object.</param>
        </member>
        <member name="M:System.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>Searches for the specified method, using the specified binding constraints.</summary><returns>An object representing the method that matches the specified requirements, if found; otherwise, null.</returns><param name="name">The string containing the name of the method to get. </param><param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param><exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
            <param name="type"><see cref="T:System.Type" /> object.</param>
        </member>
        <member name="M:System.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags)">
            <summary>When overridden in a derived class, searches for the fields defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</summary><returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</returns><param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
            <param name="type"><see cref="T:System.Type" /> object.</param>
        </member>
        <member name="M:System.TypeExtensions.GetMethods(System.Type,System.Reflection.BindingFlags)">
            <summary>When overridden in a derived class, searches for the methods defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</summary><returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</returns><param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
            <param name="type"><see cref="T:System.Type" /> object.</param>
        </member>
        <member name="M:System.TypeExtensions.InvokeMember(System.Type,System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)">
            <summary>Invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</summary><returns>An object representing the return value of the invoked member.</returns><param name="name">The string containing the name of the constructor, method, property, or field member to invoke.-or- An empty string ("") to invoke the default member. -or-For IDispatch members, a string representing the DispID, for example "[DispID=3]".</param><param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static are used. </param><param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />. Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</param><param name="target">The object on which to invoke the specified member. </param><param name="args">An array containing the arguments to pass to the member to invoke. </param><param name="culture">The object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric <see cref="T:System.String" /> to a <see cref="T:System.Double" />.-or- A null reference (Nothing in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />. </param><exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" /> does not contain CreateInstance and <paramref name="name" /> is null. </exception><exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute. -or- <paramref name="invokeAttr" /> does not contain one of the following binding flags: InvokeMethod, CreateInstance, GetField, SetField, GetProperty, or SetProperty.-or- <paramref name="invokeAttr" /> contains CreateInstance combined with InvokeMethod, GetField, SetField, GetProperty, or SetProperty.-or- <paramref name="invokeAttr" /> contains both GetField and SetField.-or- <paramref name="invokeAttr" /> contains both GetProperty and SetProperty.-or- <paramref name="invokeAttr" /> contains InvokeMethod combined with SetField or SetProperty.-or- <paramref name="invokeAttr" /> contains SetField and <paramref name="args" /> has more than one element.-or- This method is called on a COM object and one of the following binding flags was not passed in: BindingFlags.InvokeMethod, BindingFlags.GetProperty, BindingFlags.SetProperty, BindingFlags.PutDispProperty, or BindingFlags.PutRefDispProperty.-or- One of the named parameter arrays contains a string that is null. </exception><exception cref="T:System.MethodAccessException">The specified member is a class initializer. </exception><exception cref="T:System.MissingFieldException">The field or property cannot be found. </exception><exception cref="T:System.MissingMethodException">No method can be found that matches the arguments in <paramref name="args" />.-or- The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns true. </exception><exception cref="T:System.Reflection.TargetException">The specified member cannot be invoked on <paramref name="target" />. </exception><exception cref="T:System.Reflection.AmbiguousMatchException">More than one method matches the binding criteria. </exception><exception cref="T:System.InvalidOperationException">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters. That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns true.</exception>
            <param name="type"><see cref="T:System.Type" /> object.</param>
        </member>
    </members>
</doc>
